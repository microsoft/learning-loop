<#
.SYNOPSIS
   Deploys a Learning Loop environment using Azure resources and Docker images.

.DESCRIPTION
   This script automates the deployment of a Learning Loop environment. It sets up necessary Azure resources, 
   manages Docker images, and configures environment parameters. The script supports various options for 
   customizing the deployment, including skipping environment setup, loading and pushing Docker images, 
   and specifying credentials for image registries.

   The script supports both Azure Container Registry and Docker Hub. Azure Container Registry credentials are
   managed using a managed identity. Docker Hub credentials are managed using a KeyVault.

   If a KeyVault is used for image registry credentials (in the case of Docker Hub), the script will create the
   KeyVault and will prompt for the registry username and password secrets.

   The following is required prior to running the script:

      1. Login to Azure using 'az login' (or 'az login --use-device-code').
      2. Docker must be running.
      3. The Docker image tar file must be available.
      4. If using Docker Hub, the user must be logged in using 'docker login'.

   The script runs in three main phases:

      1. Setup Environment: Creates the resource group and dependencies for the Learning Loop environment.
      2. Load and Push Docker Image: Loads the Docker image tar file and pushes it to the image registry.
      3. Deploy Loop: Deploys the Learning Loop environment using the Bicep parameters file generated by the script.

.PARAMETER noDeploy
   If specified, the script generates the Bicep parameters file but does not deploy the resources.

.PARAMETER skipSetupEnvironment
   If specified, the script skips the setup of the environment. The resource group must already exist.

.PARAMETER bicepParamsFile
   The name of the Bicep parameters file to generate. Default is '<loopName>.bicepparam'.

.PARAMETER loopName
   The name of the loop to deploy. Default is 'sample-loop'.

.PARAMETER enableTrainer
   Enables the trainer component. Default is $true.

.PARAMETER enableJoiner
   Enables the joiner component. Default is $true.

.PARAMETER location
   The Azure location to deploy the resources. Default is 'westus2'.

.PARAMETER resourceGroupName
   The name of the resource group to use. Default is 'rg-<loopName>'.

.PARAMETER loadAndPushDockerImage
   If specified, the script loads and pushes the Docker image. Default is $true.

.PARAMETER dockerImageTar
   The path to the Docker image tar file. Required if loadAndPushDockerImage is true.

.PARAMETER dockerImageName
   The name of the Docker image. Default is 'learning-loop'.

.PARAMETER dockerImageTag
   The tag of the Docker image. Default is 'latest'.

.PARAMETER dockerUserOrOrgName
   The Docker Hub username or organization name if using a Docker Hub image repository. Cannot be specified with acrName.

.PARAMETER acrName
   The Azure Container Registry name. Cannot be specified with dockerUserOrOrgName.

.PARAMETER doNotGenerateImageRepositoryName
   If specified, the script does not generate the image repository name (acrName will be used unmodified). Default is $false.

.PARAMETER imageRegistryKeyVaultName
   The name of the KeyVault to use for image registry credentials and is required for Docker Hub. A default name
   will be generated if not supplied.

.PARAMETER imageRegistryKvSubscriptionId
   The subscription ID for the KeyVault. Required if using Docker Hub and default to the az account login subscription.

.PARAMETER imageRegistryKvUserNameId
   The KeyVault secret ID for the image registry username. Required if using Docker Hub and default to '<loopName>-username'.

.PARAMETER imageRegistryKvPasswordId
   The KeyVault secret ID for the image registry password. Required if using Docker Hub and default to '<loopName>-password'.

.PARAMETER managedIdentityName
   The name of the managed identity to used for running the loop and/or for accessing image registry if using an ACR.

.PARAMETER doNotGenerateManagedIdentityName
   If specified, the script does not generate the managed identity name. The name specified in managedIdentityName will be used unmodified.

.PARAMETER rlSimConfigType   
   The type of RLSim config to generate. 'connStr' uses connections strings and 'az' uses Azure Credentials. Default is 'az'.
   Notes:
      1) to use Azure Credentials with rl_sim, rl_sim must be built wtih RL_LINK_AZURE_LIBS.
      2) connStr generates a config file with a placeholder connection string. The user must replace the placeholder with the actual connection string.

.PARAMETER rlSimConfigFilename
   The filename to use for the RLSim config file. Default is 'rlsim-<loopName>.config.json'.

.PARAMETER applyUserRoleAssignments
   If true, the script will apply role assignments to the user who is currently logged in. Default is $true.

.EXAMPLE
   Deploys a sample-loop (default) to resource group rg-sample-loop in the westus2 (default) location using the Docker image
   "learning-loop-ubuntu-latest.tar" with an Azure image repository.  An ACR is used since -dockerUserOrOrgName was not supplied.
   Resource names are derived from the loop name.

   cd ./deploy
   ./scripts/deploy-sample.ps1 -dockerImageTar learning-loop-ubuntu-latest.tar

.EXAMPLE
   Deploys a sample-loop (default) to resource group rg-sample-loop in the westus2 (default) location using the Docker image
   "learning-loop-ubuntu-latest.tar" with an a Docker Hub repository since -dockerUserOrOrgName was supplied.  A Key Vault is used
   to store the Docker Hub credentials.  Resources names are derived from the loop name.

   cd ./deploy
   ./scripts/deploy-sample.ps1 -dockerImageTar learning-loop-ubuntu-latest.tar -dockerUserOrOrgName "learningloop"

.EXAMPLE
   Generates the Bicep parameters file "custom-params.bicepparam" without deploying the resources.  When using noDeploy, all resource
   names must be supplied since the script will not generate them.

   cd ./deploy
   ./deploy-sample.ps1 -noDeploy `
      -bicepParamsFile "custom-params.bicepparam" `
      -loopName "sample-loop" `
      -resourceGroupName "rg-sample-loop" `
      -dockerImageTar "learning-loop-ubuntu-latest.tar" `
      -dockerUserOrOrgName "learningloop" `
      -imageRegistryKeyVaultName "sample-loop-kv" `
      -imageRegistryKvSubscriptionId "00000000-0000-0000-0000-000000000000" `
      -imageRegistryKvUserNameId "docker-hub-username" `
      -imageRegistryKvPasswordId "docker-hub-password" `
      -managedIdentityName "mi-sample-loop"
#>
[CmdletBinding()]
param(
   [Parameter(HelpMessage = "If specified, the script generates the Bicep parameters file but does not deploy the resources.")]
   [switch] $noDeploy,

   [Parameter(HelpMessage = "If specified, the script skips the setup of the environment. The resource group must already exist.")]
   [switch] $skipSetupEnvironment,
   
   [Parameter(HelpMessage = "The name of the Bicep parameters file to generate. Default is '<loopName>.bicepparam'")]
   [string] $bicepParamsFile,
   
   [Parameter(HelpMessage = "The name of the loop to deploy. Default is 'sample-loop'")]
   [string] $loopName = "sample-loop",
   
   [Parameter(HelpMessage = "Enables the trainer component. Default is true.")]
   [bool] $enableTrainer = $true,
   
   [Parameter(HelpMessage = "Enables the joiner component. Default is true.")]
   [bool] $enableJoiner = $true,
   
   [Parameter(HelpMessage = "The Azure location to deploy the resources. Default is 'westus2'.")]
   [string] $location = "westus2",

   [Parameter(HelpMessage = "The name of the resource group to use. Default is 'rg-<loopName>'.")]
   [string] $resourceGroupName,
   
   [Parameter(HelpMessage = "If specified, the script loads and pushes the Docker image. Default is true.")]
   [bool] $loadAndPushDockerImage = $true,
   
   [Parameter(HelpMessage = "Path to the Docker image tar file.")]
   [ValidateScript({
       if ($loadAndPushDockerImage -and $null -eq $args[0]) {
           throw "You must specify -dockerImageTar if -loadAndPushDockerImage is true."
       }
       $true
   })]
   [string] $dockerImageTar,
   
   [Parameter(HelpMessage = "The name of the Docker image. Default is 'learning-loop'.")]
   [string] $dockerImageName = "learning-loop",
   
   [Parameter(HelpMessage = "The tag of the Docker image. Default is 'latest'.")]
   [string] $dockerImageTag = "latest",
   
   [Parameter(HelpMessage = "The Docker Hub username or organization name if using a Docker Hub image repository. Cannot be specified with acrName.")]
   [ValidateScript({
       if ($null -ne $args[0] -and $null -ne $acrName) {
           throw "You cannot specify both -dockerUserOrOrgName and -acrName."
       }
       $true
   })]
   [string] $dockerUserOrOrgName,
   
   [Parameter(HelpMessage = "The Azure Container Registry name. Cannot be specified with dockerUserOrOrgName.")]
   [ValidateScript({
       if ($null -ne $args[0] -and $null -ne $dockerUserOrOrgName) {
           throw "You cannot specify both -dockerUserOrOrgName and -acrName."
       }
       $true
   })]
   [string] $acrName,

   [Parameter(HelpMessage = "If specified, the script does not generate the image repository name (acrName will be used unmodified). Default is false.")]
   [switch] $doNotGenerateImageRepositoryName,
   
   [Parameter(HelpMessage = "The name of the KeyVault to use for image registry credentials and is required for Docker Hub. A default name will be generated if not supplied.")]
   [string] $imageRegistryKeyVaultName,

   [Parameter(HelpMessage = "The subscription ID for the KeyVault. Required if using Docker Hub and default to the az account login subscription.")]
   [string] $imageRegistryKvSubscriptionId,
   
   [Parameter(HelpMessage = "The KeyVault secret ID for the image registry username. Required if using Docker Hub and default to '<loopName>-username'.")]
   [string] $imageRegistryKvUserNameId,
   
   [Parameter(HelpMessage = "The KeyVault secret ID for the image registry password. Required if using Docker Hub and default to '<loopName>-password'.")]
   [string] $imageRegistryKvPasswordId,
   
   [Parameter(HelpMessage = "The name of the managed identity to used for running the loop and/or for accessing image registry if using an ACR.")]
   [string] $managedIdentityName = "learning-loop",

   [Parameter(HelpMessage = "If specified, the script does not generate the managed identity name. The name specified in managedIdentityName will be used unmodified. The default is false")]
   [switch] $doNotGenerateManagedIdentityName,

   [Parameter(HelpMessage = "The type of RLSim config to generate. 'connStr' uses connections strings and 'az' uses Azure Credentials. Default is 'connStr'")]
   [ValidateSet("connStr", "az")]
   [string] $rlSimConfigType = "az",

   [Parameter(HelpMessage = "The filename to use for the RLSim config file. Default is 'rlsim-<loopName>.config.json'")]
   [string] $rlSimConfigFilename = "rlsim-$loopName.config.json",

   [Parameter(HelpMessage = "If true, the script will apply role assignments to the user who is currently logged in. Default is true.")]
   [bool] $applyUserRoleAssignments = $true
)

##########################################################################################
# Globals -- these are used script-wide
$imageHost = ""
$imageHostType = "docker"
$imageRegistryCredType = ""
##########################################################################################

function GetAzAccount {
   $account = az account show --output json | ConvertFrom-Json
   if ($account) {
      return $account
   }
   else {
      throw "Not logged in. Please login using 'az login'."
   }
}

function KeyVaultExists {
   $keyVault = az keyvault show --name $imageRegistryKeyVaultName --resource-group $resourceGroupName --query "name" --output tsv 2>$null
   if ($LASTEXITCODE -ne 0) {
      return $false
   }
   return $null -ne $keyVault
}

function GetNormalizedLoopName {
   param (
      [string]$loopName
   )

   $adjustedLoopName = $loopName.ToLower()
   $adjustedLoopName = $adjustedLoopName -replace '_', '-' # change _ to -
   $adjustedLoopName = $adjustedLoopName -replace '[^a-zA-Z0-9-]', '' # Remove invalid characters
   $adjustedLoopName = $adjustedLoopName -replace '--+', '-' # Replace consecutive dashes with a single dash
   $adjustedLoopName = $adjustedLoopName.Trim('-') # Remove leading and trailing dashes
   if ($adjustedLoopName -match '^[^a-zA-Z]') {
      $adjustedLoopName = "a$adjustedLoopName" # Ensure it starts with a letter
   }
   return $adjustedLoopName
}

function MakeACRName {
   param (
      [string]$name
   )

   $transformatedName = $name.ToLower()
   $transformatedName = $transformatedName -replace '[^a-z0-9]', '' # Extract only a-z and 0-9
   return $transformatedName
}

function  MakeImageHost {
   param (
      [ValidateSet("docker", "acr")]
      [string] $hostType,
      [string] $acrName
   )
   if ($hostType -eq "docker") {
      return "docker.io"
   }
   elseif ($hostType -eq "acr") {
      return "$acrName.azurecr.io"
   }
   else {
      throw "Invalid host type: $hostType"
   }
}

function ValidateAndDefaultParametersForNoDeploy {
   if ([string]::IsNullOrEmpty($loopName)) {
      throw "You must specify -loopName when using -NoDeploy or -skipSetupEnvironment."
   }

   if ([string]::IsNullOrEmpty($bicepParamsFile)) {
      $script:bicepParamsFile = "$loopName.bicepparam"
   }

   if ([string]::IsNullOrEmpty($dockerUserOrOrgName) -and [string]::IsNullOrEmpty($acrName)) {
      throw "You must specify -dockerUserOrOrgName or -acrName when using -NoDeploy or -skipSetupEnvironment."
   }
   
   if ([string]::IsNullOrEmpty($dockerUserOrOrgName) -eq $false) {
      $script:imageHostType = "docker"
   }
   elseif ([string]::IsNullOrEmpty($acrName) -eq $false) {
      $script:imageHostType = "acr"
   }

   $script:imageHost = MakeImageHost -hostType $script:imageHostType -acrName $acrName

   if ($script:imageHostType -eq "docker") {
      $script:imageRegistryCredType = "KeyVault"
      if ([string]::IsNullOrEmpty($imageRegistryKvSubscriptionId)) {
         $account = GetAzAccount
         $script:imageRegistryKvSubscriptionId = $account.id
      }
      if ([string]::IsNullOrEmpty($imageRegistryKvUserNameId)) {
         throw "You must specify -imageRegistryKvUserNameId when using -NoDeploy or -skipSetupEnvironment."
      }
      if ([string]::IsNullOrEmpty($imageRegistryKvPasswordId)) {
         throw "You must specify -imageRegistryKvPasswordId when using -NoDeploy or -skipSetupEnvironment."
      }
   }
   else {
      $script:imageRegistryCredType = "ManagedIdentity"
      if ([string]::IsNullOrEmpty($managedIdentityName)) {
         throw "You must specify -managedIdentityName when using -NoDeploy or -skipSetupEnvironment."
      }
   }
}

function ValidateAndDefaultParametersForExistingEnvironment {
   if ([string]::IsNullOrEmpty($loopName)) {
      throw "You must specify -loopName when using -NoDeploy or -skipSetupEnvironment."
   }

   if ([string]::IsNullOrEmpty($bicepParamsFile)) {
      $script:bicepParamsFile = "$loopName.bicepparam"
   }

   if ([string]::IsNullOrEmpty($resourceGroupName)) {
      throw "You must specify -resourceGroupName when using -NoDeploy or -skipSetupEnvironment."
   }
   
   if ([string]::IsNullOrEmpty($dockerUserOrOrgName) -and [string]::IsNullOrEmpty($acrName)) {
      throw "You must specify -dockerUserOrOrgName or -acrName when using -NoDeploy or -skipSetupEnvironment."
   }
   
   if ([string]::IsNullOrEmpty($dockerUserOrOrgName) -eq $false) {
      $script:imageHostType = "docker"
   }
   elseif ([string]::IsNullOrEmpty($acrName) -eq $false) {
      $script:imageHostType = "acr"
   }

   $script:imageHost = MakeImageHost -hostType $script:imageHostType -acrName $acrName

   if ($script:imageHostType -eq "docker") {
      $script:imageRegistryCredType = "KeyVault"
      if ([string]::IsNullOrEmpty($imageRegistryKvSubscriptionId)) {
         $account = GetAzAccount
         $script:imageRegistryKvSubscriptionId = $account.id
      }
      if ([string]::IsNullOrEmpty($imageRegistryKvUserNameId)) {
         throw "You must specify -imageRegistryKvUserNameId when using -NoDeploy or -skipSetupEnvironment."
      }
      if ([string]::IsNullOrEmpty($imageRegistryKvPasswordId)) {
         throw "You must specify -imageRegistryKvPasswordId when using -NoDeploy or -skipSetupEnvironment."
      }
   }
   else {
      $script:imageRegistryCredType = "ManagedIdentity"
      if ([string]::IsNullOrEmpty($managedIdentityName)) {
         throw "You must specify -managedIdentityName when using -NoDeploy or -skipSetupEnvironment."
      }
   }
}

function ValidateAndDefaultParametersForNewEnvironment {
   $account = GetAzAccount
   $normalizedLoopName = GetNormalizedLoopName $loopName
   if ($normalizedLoopName -ne $loopName) {
      $loopName = $normalizedLoopName
      Write-Host "Adjusted loop name to: '$loopName'" -ForegroundColor Yellow
   }

   if ([string]::IsNullOrEmpty($bicepParamsFile)) {
      $script:bicepParamsFile = "$loopName.bicepparam"
   }

   if ([string]::IsNullOrEmpty($resourceGroupName)) {
      $script:resourceGroupName = "rg-$loopName"
   }
   
   # Set default value for acrName if dockerUserOrOrgName is not provided
   if ([string]::IsNullOrEmpty($dockerUserOrOrgName) -and [string]::IsNullOrEmpty($acrName)) {
      $script:acrName = MakeACRName -name $loopName
   }
   
   if ([string]::IsNullOrEmpty($dockerUserOrOrgName) -eq $false) {
      $script:imageHostType = "docker"
   }
   elseif ($null -ne $acrName) {
      $script:imageHostType = "acr"
   }
   else {
      throw "You must specify either -dockerUserOrOrgName or -acrName."
   }
   $script:imageHost = MakeImageHost -hostType $script:imageHostType -acrName $acrName

   if ($script:imageHostType -eq "docker") {
      $script:imageRegistryCredType = "KeyVault"
      if ([string]::IsNullOrEmpty($imageRegistryKvSubscriptionId)) {
         $script:imageRegistryKvSubscriptionId = $account.id
         Write-Host "KeyVault subscription defaulted to '$imageRegistryKvSubscriptionId'" -ForegroundColor Yellow
      }
      if ([string]::IsNullOrEmpty($imageRegistryKvUserNameId)) {
         $script:imageRegistryKvUserNameId = "$loopName-username"
         Write-Host "KeyVault username id defaulted to '$imageRegistryKvUserNameId'" -ForegroundColor Yellow 
      }
      if ([string]::IsNullOrEmpty($imageRegistryKvPasswordId)) {
         $script:imageRegistryKvPasswordId = "$loopName-password"
         Write-Host "KeyVault password id defaulted to '$imageRegistryKvPasswordId'" -ForegroundColor Yellow
      }
   }
   else {
      $script:imageRegistryCredType = "ManagedIdentity"
      if ([string]::IsNullOrEmpty($managedIdentityName)) {
         $script:managedIdentityName = $loopName
      }
   }
}

function ValidateAndDefaultParameters {
   if ($noDeploy) {
      ValidateAndDefaultParametersForNoDeploy
      return
   }
   if ($skipSetupEnvironment) {
      ValidateAndDefaultParametersForExistingEnvironment
   }
   else {
      ValidateAndDefaultParametersForNewEnvironment
   }
   Write-Host ""
}

function DisplayParameters {
   $paramterList = @{};

   Write-Host "The deployment will execute with the following parameters:" -ForegroundColor Yellow
   if ($noDeploy -eq $true) {
      $paramterList["noDeploy"] = @{ Value = $noDeploy; Note = "Generates the bicep params file ${bicepParamsFile}, but will NOT deploy the resources" }
   }
   else {
      $paramterList["noDeploy"] = @{ Value = $noDeploy; Note = "Generate the bicep params file ${bicepParamsFile}, AND will deploy the resources" }
   }
   if ($loopNameAdjusted) {
      $paramterList["loopName"] = @{ Value = $loopName; Note = "Adjusted loopName for deployment" }
   }
   else {
      $paramterList["loopName"] = @{ Value = $loopName; Note = "" }
   }

   if ($skipSetupEnvironment -eq $true) {
      $paramterList["skipSetupEnvironment"] = @{ Value = $skipSetupEnvironment; Note = "Will not deploy the resource group (it must exist)" }
   }
   else {
      $paramterList["skipSetupEnvironment"] = @{ Value = $skipSetupEnvironment; Note = "Create the resource group and dependencies" }
   }

   if ($applyUserRoleAssignments) {
      $paramterList["applyUserRoleAssignments"] = @{ Value = $applyUserRoleAssignments; Note = "Role assignments will be applied to the user who is currently logged in" }
   }
   else {
      $paramterList["applyUserRoleAssignments"] = @{ Value = $applyUserRoleAssignments; Note = $note = "Role assignments will NOT be applied to the user who is currently logged in" }
   }

   $paramterList["bicepParamsFile"] = @{ Value = $bicepParamsFile; Note = "" }
   $paramterList["enableTrainer"] = @{ Value = $enableTrainer; Note = "" }
   $paramterList["enableJoiner"] = @{ Value = $enableJoiner; Note = "" }
   $paramterList["rlSimConfigType"] = @{ Value = $rlSimConfigType; Note = "" }
   $paramterList["rlSimConfigFilename"] = @{ Value = $rlSimConfigFilename; Note = "" }
   $paramterList["resourceGroupName"] = @{ Value = $resourceGroupName; Note = "" }
   $paramterList["location"] = @{ Value = $location; Note = "" }
   $paramterList["loadAndPushDockerImage"] = @{ Value = $loadAndPushDockerImage; Note = "" }
   $paramterList["dockerImageTar"] = @{ Value = $dockerImageTar; Note = "" }
   $paramterList["dockerImageName"] = @{ Value = $dockerImageName; Note = "" }
   $paramterList["dockerImageTag"] = @{ Value = $dockerImageTag; Note = "" }
   if ($script:imageHostType -eq "docker") {
      $paramterList["dockerUserOrOrgName"] = @{ Value = $dockerUserOrOrgName; Note = "" }
   }
   elseif ($script:imageHostType -eq "acr") {
      $note = ""
      if ($doNotGenerateImageRepositoryName) {
         $note = "An Azure container repository will be created with the specified name. To use a generated name re-run the script without the -doNotGenerateImageRepositoryName switch"
      }
      else {
         $note = "An Azure container repository will be created. The ACR name will be generated when the environment is deployed with '$acrName' included in the generated name. To disable ACR name generation re-run the script with -doNotGenerateImageRepositoryName"
      }
      if ([string]::IsNullOrEmpty($acrName)) {
         $note = "ACR name will be generated when the environment is deployed"
      }
      $paramterList["acrName"] = @{ Value = $acrName; Note = $note }
   }

   if ($imageRegistryCredType -eq "KeyVault") {
      $note = ""
      if ([string]::IsNullOrEmpty($imageRegistryKeyVaultName)) {
         $note = "KeyVault name will be created with '$loopName' included in the generated name. To use a specified name re-run with the -imageRegistryKeyVaultName parameter"
      }
      else {
         $note = "KeyVault name will be created with the specified name. To use a generated name re-run without the -imageRegistryKeyVaultName parameter"
      }
      $paramterList["imageRegistryKeyVaultName"] = @{ Value = $imageRegistryKeyVaultName; Note = $note }
      $paramterList["imageRegistryKvSubscriptionId"] = @{ Value = $imageRegistryKvSubscriptionId; Note = "" }
      $paramterList["imageRegistryKvUserNameId"] = @{ Value = $imageRegistryKvUserNameId; Note = "" }
      $paramterList["imageRegistryKvPasswordId"] = @{ Value = $imageRegistryKvPasswordId; Note = "" }
   }
   if ($doNotGenerateManagedIdentityName) {
      $paramterList["managedIdentityName"] = @{ Value = $managedIdentityName; Note = "A managed identity will be created with the specified name. To use a generated name re-run without the -doNotGenerateManagedIdentityName switch" }
   }
   else {
      $paramterList["managedIdentityName"] = @{ Value = $managedIdentityName; Note = "A managed identity will be created with a generated name when the environment is deployed with '$managedIdentityName' included in the generated name. To disable name generation re-run with the -doNotGenerateManagedIdentityName switch" }
   }
   $paramterList.GetEnumerator() | Sort-Object Key | Format-Table -Property @{Label="Parameter"; Expression={$_.Key}}, @{Label="Value"; Expression={$_.Value.Value}}, @{Label="Note"; Expression={$_.Value.Note}} -Wrap

   if ($script:imageHostType -eq "acr" -and $doNotGenerateImageRepositoryName -eq $false) {
      Write-Host "An Azure container repository will be used. The image host name will be generated when the environment is deployed. To disable ACR name generation rerun the script with -doNotGenerateImageRepositoryName (do this if you already have an ACR)" -ForegroundColor Yellow
   }
   else {
      Write-Host "The image host is '$script:imageHost'" -ForegroundColor Yellow
   }
}

function GeneratedParametersFile {
   param(
      [string] $imageRegistryKeyVaultName,
      [string] $managedIdentityName,
      [string] $imageHost
   )

   $finalImageName = $dockerImageName
   if ([string]::IsNullOrEmpty($dockerUserOrOrgName) -eq $false) {
      $finalImageName = "$dockerUserOrOrgName/$dockerImageName"
   }

   $keyVaultParams = "";
   if ($imageRegistryCredType -eq "KeyVault") {
      $keyVaultParams = @"
param kvImageRegistryUsername = getSecret('$imageRegistryKvSubscriptionId', '$resourceGroupName', '$imageRegistryKeyVaultName', '$imageRegistryKvUserNameId')
param kvImageRegistryPassword = getSecret('$imageRegistryKvSubscriptionId', '$resourceGroupName', '$imageRegistryKeyVaultName', '$imageRegistryKvPasswordId')
"@
   }
   
   $imageCredentials = "";
   if ($imageRegistryCredType -eq "ManagedIdentity") {
      $imageCredentials = @"
{
   type: 'managedIdentity'
   username: '$managedIdentityName'
}
"@
   }
   elseif ($imageRegistryCredType -eq "KeyVault") { 
      $imageCredentials = @"
{
   type: 'keyVault'
}
"@
   }

   $roleAssignmentUserParam = "";
   if ($applyUserRoleAssignments) {
      $userObjectId = (az ad signed-in-user show --query 'id' --output tsv)
      $roleAssignmentUserParam = "roleAssignmentUserObjectId: '$userObjectId'";
   }
  
   $bicepParams = @"
//
// bicep pameters file generated by 'deploy-sample.ps1'
//
using 'main.bicep'
$keyVaultParams
param mainConfig = {
   appName: '$loopName'
   $roleAssignmentUserParam
   environmentVars: [
      {
      name: 'ConsoleMetricExporterEnabled' 
      value: 'true'
      }
      {
      name: 'OtlpMetricExporterEnabled' 
      value: 'true'
      }
      {
      name: 'ExperimentalUnitDuration'
      value: '0:0:10'
      }
      {
      name: 'TrainerEnabled'
      value: $($enableTrainer.ToString().ToLower())
      }
      {
      name: 'JoinerEnabled'
      value: $($enableJoiner.ToString().ToLower())
      }
      {
      name: 'MachineLearningArguments'
      value: '--cb_explore_adf --epsilon 0.2 --power_t 0 -l 0.001 --cb_type ips -q ::'
      }
      {
      name: 'LastConfigurationEditDate'
      value: '2024-01-01'
      }
   ]
   resourceTags: {
      deploymentGroupName: '$loopName'
   }
   storage: {
      sku: 'Standard_LRS'
      kind: 'StorageV2'
   }
   eventhub: {
      capacity: 1
      partitionCount: 4
      sku: 'Standard'
      messageRetentionDays: 1
   }
   container: {
      cpuCores: 4
      memoryGig: 16
      image: {
      registry: {
         host: '$script:imageHost'
         credentials: $imageCredentials
      }
      name: '$finalImageName'
      tag: '$dockerImageTag'
      }
   }
}
"@
   
   $bicepParams | Out-File -FilePath $bicepParamsFile -Encoding utf8
   Write-Host "Bicep parameters file generated: $bicepParamsFile" -ForegroundColor Yellow
}

function TryVerifyDocker {
   docker info >$null 2>&1
   if ($LASTEXITCODE -ne 0) {
      throw "Failed to start Docker. Please start Docker and try again."
   }
   else {
      Write-Host "Docker is running" -ForegroundColor Green
   }
}

function TryPushDockerImage
{
   param(
      [string] $dockerImageTar,
      [string] $dockerImageName,
      [string] $dockerImageTag,
      [string] $dockerUserOrOrgName,
      [string] $acrName
   )

   Write-Host "Loading docker image: $dockerImageTar" -ForegroundColor Yellow
   docker load -i $dockerImageTar
   if ($LASTEXITCODE -eq 0) {
      Write-Host "Docker image loaded successfully." -ForegroundColor Green
   } else {
      throw "Failed to load Docker image."
   }

   $fullDockerImage = "";
   if ([string]::IsNullOrEmpty($dockerUserOrOrgName) -eq $false) {
      docker login
      if ($LASTEXITCODE -eq 0) {
         Write-Host "Docker login succeeded." -ForegroundColor Green
      } else {
         throw "Docker login failed."
      }
      $fullDockerImage = "$dockerUserOrOrgName/$dockerImageName"
   }
   elseif ([string]::IsNullOrEmpty($acrName) -eq $false) {
      az acr login --name $acrName
      if ($LASTEXITCODE -eq 0) {
         Write-Host "Azure Container Registry login succeeded." -ForegroundColor Green
      } else {
         throw "Azure Container Registry login failed."
      }
      $fullDockerImage = "${script:imageHost}/${dockerImageName}:${dockerImageTag}"
   }
   else {
      throw "You must specify either -dockerUserOrOrgName or -acrName."
   }

   Write-Host "Tagging docker image ${dockerImageName}:${dockerImageTag} -> $fullDockerImage" -ForegroundColor Yellow
   docker tag ${dockerImageName}:${dockerImageTag} $fullDockerImage
   if ($LASTEXITCODE -eq 0) {
      Write-Host "Docker tag ${dockerImageName}:${dockerImageTag} -> $fullDockerImage succeeded." -ForegroundColor Green
   } else {
      throw "Docker tag ${dockerImageName}:${dockerImageTag} -> $fullDockerImage failed."
   }

   Write-Host "Pushing docker image... $fullDockerImage" -ForegroundColor Yellow
   docker push $fullDockerImage
   if ($LASTEXITCODE -eq 0) {
      Write-Host "Docker push $fullDockerImage succeeded." -ForegroundColor Green
   } else {
      throw "Docker push $fullDockerImage failed."
   }
}

function PromptSecure {
   param (
      [string]$prompt
   )

   $secureString = Read-Host -Prompt $prompt -AsSecureString
   $plainText = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureString))
   return $plainText
}

function TrySetupEnvironment {
   Write-Host "Deploying environment to resource group '$resourceGroupName' in location '$location'." -ForegroundColor Yellow
   $createKeyVault = ($imageRegistryCredType -eq "KeyVault") -and ((KeyVaultExists) -eq $false)
   if ($createKeyVault) {
      $registryUsername = PromptSecure -Prompt "Enter the username for the image registry"
      $registryPassword = PromptSecure -Prompt "Enter the password for the image registry"

      $userObjectId = (az ad signed-in-user show --query 'id' --output tsv)
      Write-Host "`texecuting az command: $azResult = az deployment sub create --location $location --name "$loopName-environment" --template-file .\environment.bicep --parameters resourceGroupName=$resourceGroupName doNotGenerateACRName=$doNotGenerateImageRepositoryName managedIdentityName=$managedIdentityName doNotGenerateManagedIdentityName=$doNotGenerateImageRepositoryName keyVaultName=$imageRegistryKeyVaultName imageRegistryUsernameId=$imageRegistryKvUserNameId imageRegistryUsername=********** imageRegistryPasswordId=$imageRegistryKvPasswordId imageRegistryPassword=************ userObjectId=$userObjectId" -ForegroundColor Gray
      $azResult = az deployment sub create `
         --location $location `
         --name "$loopName-environment" `
         --template-file .\environment.bicep `
         --parameters `
            resourceGroupName=$resourceGroupName `
            doNotGenerateACRName=$doNotGenerateImageRepositoryName `
            doNotGenerateManagedIdentityName=$doNotGenerateImageRepositoryName `
            managedIdentityName=$managedIdentityName `
            keyVaultName=$imageRegistryKeyVaultName `
            imageRegistryUsernameId=$imageRegistryKvUserNameId `
            imageRegistryUsername=$registryUsername `
            imageRegistryPasswordId=$imageRegistryKvPasswordId `
            imageRegistryPassword=$registryPassword `
            userObjectId=$userObjectId

      $registryPassword = $null
      $registryUsername = $null
   }
   else {
      Write-Host "`texecuting az command: az deployment sub create --location $location --name "$loopName-environment" --template-file .\environment.bicep --parameters resourceGroupName=$resourceGroupName acrName=$acrName managedIdentityName=$managedIdentityName" -ForegroundColor Gray
      $azResult = az deployment sub create `
      --location $location `
      --name "$loopName-environment" `
      --template-file .\environment.bicep `
      --parameters resourceGroupName=$resourceGroupName acrName=$acrName managedIdentityName=$managedIdentityName
   }
   $azResultJson = $azResult | ConvertFrom-Json
   if ($azResultJson.properties.provisioningState -eq "Succeeded") {
      Write-Host "Environment deployment succeeded." -ForegroundColor Green
   }
   else {
      throw "Environment deployment failed: $azResultJson"
   }
   return $azResultJson
}

function TryDeployLoop {
   Write-Host "Deployment started... using bicep parameters file: $bicepParamsFile" -ForegroundColor Yellow
   Write-Host "`texecuting az command: az deployment group create --resource-group $resourceGroupName --name $loopName --parameters $bicepParamsFile" -ForegroundColor Gray
   $azResult = az deployment group create --resource-group $resourceGroupName --name $loopName --parameters $bicepParamsFile
   $azResultJson = $azResult | ConvertFrom-Json
   if ($azResultJson.properties.provisioningState -eq "Succeeded") {
      Write-Host "Deployment succeeded." -ForegroundColor Green
   }
   else {
      throw "Deployment failed: $azResultJson" 
   }
   return $azResultJson
}

function TryVerifyAccountInfo {
   $account = GetAzAccount
   Write-Host "Logged in as: " -NoNewline
   Write-Host "$($account.user.name) ($($account.user.type))" -ForegroundColor Green
   Write-Host "Subscription: " -NoNewline
   Write-Host "$($account.name) - $($account.id)" -ForegroundColor Green
   Write-Host ""
}

function TryGenerateRLSimConfigConnStr {
   param (
      [string] $connectionString
   )

   return @"
{
   "ApplicationID": "$loopName",
   "IsExplorationEnabled": true,
   "InitialExplorationEpsilon": 1.0,
   "EventHubInteractionConnectionString": "$connectionString;EntityPath=interaction",
   "EventHubObservationConnectionString": "$connectionString;EntityPath=observation",
   "model.vw.initial_command_line": "--cb_explore_adf --epsilon 0.2 --power_t 0 -l 0.001 --cb_type ips -q ::",
   "protocol.version": 2,
   "model.source": "FILE_MODEL_DATA"
}
"@
}

function TryGenerateRLSimConfigAZ {
   param (
      [string] $eventHubEndpoint
   )

   return @"
{
   "ApplicationID": "$loopName",
   "IsExplorationEnabled": true,
   "InitialExplorationEpsilon": 1.0,
   "http.api.header.key.name": "Authorization",
   "http.api.oauth.token.type": "Bearer",
   "interaction.sender.implementation": "INTERACTION_HTTP_API_SENDER_OAUTH_AZ",
   "interaction.eventhub.name": "interaction",
   "interaction.http.api.host": "${eventHubEndpoint}interaction/messages",
   "observation.sender.implementation": "OBSERVATION_HTTP_API_SENDER_OAUTH_AZ",
   "observation.eventhub.name": "observation",
   "observation.http.api.host": "${eventHubEndpoint}observation/messages",
   "model.vw.initial_command_line": "--cb_explore_adf --epsilon 0.2 --power_t 0 -l 0.001 --cb_type ips -q ::",
   "protocol.version": 2,
   "model.source": "FILE_MODEL_DATA"
}
"@
}

function TryGenerateRLSimConfig {
   param(
      [PSCustomObject] $deploymentProperties
   )

   $rlSimConfig = ""
   if ($rlSimConfigType -eq "connStr") {
      $rlSimConfig = TryGenerateRLSimConfigConnStr -eventHubConnStr "CONNECTION_STRING_PLACEHOLDER"
   }
   else {
      $rlSimConfig = TryGenerateRLSimConfigAZ -eventHubEndpoint $deploymentProperties.eventHubEndpoint.value
   }
   $rlSimConfig | Out-File -FilePath $rlSimConfigFilename -Encoding utf8
   Write-Host "RLSim config file generated: $rlSimConfigFilename" -ForegroundColor Yellow
}

#############################################################################
# Main script
try {
   TryVerifyDocker
   TryVerifyAccountInfo
   ValidateAndDefaultParameters
   DisplayParameters

   if ($noDeploy) {
      GeneratedParametersFile -imageRegistryKeyVaultName $imageRegistryKeyVaultName -managedIdentityName $managedIdentityName -imageHost $script:imageHost
      Write-Host "Done... skipping deployment (noDeploy: $noDeploy)" -ForegroundColor Yellow
      exit 0
   }

   $continue = Read-Host "Would you like to continue with the deployment? (yes/no)"
   if ($continue -ne "yes") {
      Write-Host "Deployment aborted by the user." -ForegroundColor Yellow
      exit 0
   }
   Write-Host ""

   # default the final values for parameters that may have been generated
   $finalACRName = $acrName
   $finalKeyVaultName = $keyVaultName
   $finalManagedIdentityName = $managedIdentityName
   if ($skipSetupEnvironment -eq $false) {
      $envResult = TrySetupEnvironment

      # get the final values for parameters that may have been generated
      $finalACRName = $envResult.properties.outputs.acrName.value
      $finalKeyVaultName = $envResult.properties.outputs.keyVaultName.value
      $finalManagedIdentityName = $envResult.properties.outputs.managedIdentityName.value
      $script:imageHost = MakeImageHost -hostType $script:imageHostType -acrName $finalACRName
   }

   GeneratedParametersFile -imageRegistryKeyVaultName $finalKeyVaultName -managedIdentityName $finalManagedIdentityName -imageHost $imageHost

   if ($loadAndPushDockerImage -eq $true) {
      TryPushDockerImage -dockerImageTar $dockerImageTar -dockerImageName $dockerImageName -dockerImageTag $dockerImageTag -dockerUserOrOrgName $dockerUserOrOrgName -acrName $finalACRName
   }

   $loopDeployResult = TryDeployLoop
   TryGenerateRLSimConfig -deploymentProperties $loopDeployResult.properties.outputs
}
catch {
    Write-Host "An error occurred: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "Full error details: $($_ | Out-String)"  -ForegroundColor Red
    exit 1
}
