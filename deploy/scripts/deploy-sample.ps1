#!/usr/bin/env pwsh
<#
.SYNOPSIS
   Deploys a Learning Loop environment using Azure resources and Docker images.

.DESCRIPTION
   This script automates the deployment of a Learning Loop environment. It sets up necessary Azure resources, 
   manages Docker images, and configures environment parameters. The script supports various options for 
   customizing the deployment, including skipping environment setup, loading and pushing Docker images, 
   and specifying credentials for image registries.

   The script supports both Azure Container Registry and Docker Hub. Azure Container Registry credentials can
   be managed using either a managed identity or a KeyVault. Docker Hub credentials are managed using a KeyVault.

   If a KeyVault is used for image registry credentials, the script will create the KeyVault and will prompt for
   the registry username and password secrets.

   The following is required prior to running the script:

      1. Login to Azure using 'az login' (or 'az login --use-device-code').
      2. Docker must be running.
      3. The Docker image tar file must be available.
      4. If using Docker Hub, the user must be logged in using 'docker login'.

   The script runs in three main phases:

      1. Setup Environment: Creates the resource group and dependencies for the Learning Loop environment.
      2. Load and Push Docker Image: Loads the Docker image tar file and pushes it to the image registry.
      3. Deploy Loop: Deploys the Learning Loop environment using the Bicep parameters file generated by the script.

.PARAMETER noDeploy
   If specified, the script generates the Bicep parameters file but does not deploy the resources.

.PARAMETER skipSetupEnvironment
   If specified, the script skips the setup of the environment. The resource group must already exist.

.PARAMETER bicepParamsFile
   The name of the Bicep parameters file to generate. Default is "parameters.bicepparam".

.PARAMETER loopName
   The name of the loop to deploy. Default is "sample-loop".

.PARAMETER enableTrainer
   Enables the trainer component. Default is $true.

.PARAMETER enableJoiner
   Enables the joiner component. Default is $true.

.PARAMETER resourceGroupName
   The name of the resource group to use. Default is "rg-sample-loop".

.PARAMETER location
   The Azure location to deploy the resources. Default is "westus2".

.PARAMETER loadAndPushDockerImage
   If specified, the script loads and pushes the Docker image. Default is $true.

.PARAMETER dockerImageTar
   The path to the Docker image tar file. Required if loadAndPushDockerImage is true.

.PARAMETER dockerImageName
   The name of the Docker image. Default is "learning-loop".

.PARAMETER dockerImageTag
   The tag of the Docker image. Default is "latest".

.PARAMETER dockerUserOrOrgName
   The Docker Hub username or organization name. Cannot be specified with acrName.

.PARAMETER acrName
   The Azure Container Registry name. Cannot be specified with dockerUserOrOrgName.

.PARAMETER imageRegistryCredType
   The type of credentials to use for the image registry. Valid values are "ManagedIdentity" and "KeyVault". Default is "ManagedIdentity".

.PARAMETER imageRegistryKeyVaultName
   The name of the KeyVault to use for image registry credentials. Required if imageRegistryCredType is "KeyVault".

.PARAMETER imageRegistryKvSubscriptionId
   The subscription ID for the KeyVault. Required if imageRegistryCredType is "KeyVault".

.PARAMETER imageRegistryKvUserNameId
   The KeyVault secret ID for the image registry username. Required if imageRegistryCredType is "KeyVault".

.PARAMETER imageRegistryKvPasswordId
   The KeyVault secret ID for the image registry password. Required if imageRegistryCredType is "KeyVault".

.PARAMETER imageRegistryManagedIdentityName
   The name of the managed identity to use for the image registry. Required if imageRegistryCredType is "ManagedIdentity".

.EXAMPLE
   cd ./deploy
   ./scripts/deploy-sample.ps1 -dockerImageTar learning-loop-ubuntu-latest.tar -imageRegistryCredType ManagedIdentity
   Deploys a sample-loop to resource group rg-sample-loop in the westus2 location using the Docker image "learning-loop-ubuntu-latest.tar" with
   an Azure image repository and Managed Identity for image registry credentials.

.EXAMPLE
   cd ./deploy
   ./scripts/deploy-sample.ps1 -dockerImageTar learning-loop-ubuntu-latest.tar -imageRegistryCredType KeyVault -dockerUserOrOrgName "learningloop"
   Deploys a sample-loop to resource group rg-sample-loop in the westus2 location using the Docker image "learning-loop-ubuntu-latest.tar" with
   a DockerHub repository and a Key Vault for image registry credentials.

.EXAMPLE
   cd ./deploy
   ./deploy-sample.ps1 -noDeploy -bicepParamsFile "custom-params.bicepparam" -imageRegistryCredType ManagedIdentity
   Generates the Bicep parameters file "custom-params.bicepparam" without deploying the resources.
#>

[CmdletBinding()]
param(
   [Parameter(HelpMessage = "Switch to skip the deployment process.")]
   [switch] $noDeploy,

   [Parameter(HelpMessage = "Switch to skip the setup of the environment.")]
   [switch] $skipSetupEnvironemt,
   
   [Parameter(HelpMessage = "Path to the Bicep parameters file that will be generated by the script.")]
   [string] $bicepParamsFile = "parameters.bicepparam",
   
   [Parameter(HelpMessage = "Name of the Leanring Loop.")]
   [string] $loopName = "sample-loop",
   
   [Parameter(HelpMessage = "Enable the trainer component.")]
   [bool] $enableTrainer = $true,
   
   [Parameter(HelpMessage = "Enable the joiner component.")]
   [bool] $enableJoiner = $true,
   
   [Parameter(HelpMessage = "Name of the target resource group.")]
   [string] $resourceGroupName = "rg-sample-loop",
   
   [Parameter(HelpMessage = "Azure location for the resources.")]
   [string] $location = "westus2",
   
   [Parameter(HelpMessage = "true to Load and push the Docker image.")]
   [bool] $loadAndPushDockerImage = $true,
   
   [Parameter(HelpMessage = "Path to the Docker image tar file.")]
   [ValidateScript({
       if ($loadAndPushDockerImage -and $null -eq $args[0]) {
           throw "You must specify -dockerImageTar if -loadAndPushDockerImage is true."
       }
       $true
   })]
   [string] $dockerImageTar,
   
   [Parameter(HelpMessage = "Name of the Docker image.")]
   [string] $dockerImageName = "learning-loop",
   
   [Parameter(HelpMessage = "Tag of the Docker image.")]
   [string] $dockerImageTag = "latest",
   
   [Parameter(HelpMessage = "Docker user or organization name (should be supplied if using a Docker image repository).")]
   [ValidateScript({
       if ($null -ne $args[0] -and $null -ne $acrName) {
           throw "You cannot specify both -dockerUserOrOrgName and -acrName."
       }
       $true
   })]
   [string] $dockerUserOrOrgName,
   
   [Parameter(HelpMessage = "Azure Container Registry name (should be supplied if using an Azure image repository).")]
   [ValidateScript({
       if ($null -ne $args[0] -and $null -ne $dockerUserOrOrgName) {
           throw "You cannot specify both -dockerUserOrOrgName and -acrName."
       }
       $true
   })]
   [string] $acrName,
   
   [Parameter(HelpMessage = "Type of credentials for the image registry.")]
   [ValidateSet("ManagedIdentity", "KeyVault")]
   [string] $imageRegistryCredType = "ManagedIdentity",
   
   [Parameter(HelpMessage = "Name of the Key Vault for image registry credentials.")]
   [ValidateScript({
       if ($imageRegistryCredType -eq "KeyVault" -or $null -eq $args[0]) {
           $true
       } else {
           throw "You can only specify -imageRegistryKeyVaultName if -imageRegistryCredType is 'KeyVault'."
       }
   })]
   [string] $imageRegistryKeyVaultName = "kv-learning-loop",
   
   [Parameter(HelpMessage = "Subscription ID for the Key Vault (defaults to the current subscription).")]
   [ValidateScript({
       if ($imageRegistryCredType -eq "KeyVault" -or $null -eq $args[0]) {
           $true
       } else {
           throw "You can only specify -imageRegistryKvSubscriptionId if -imageRegistryCredType is 'KeyVault'."
       }
   })]
   [string] $imageRegistryKvSubscriptionId,
   
   [Parameter(HelpMessage = "KeyVault Secret user name identifier.")]
   [ValidateScript({
       if ($imageRegistryCredType -eq "KeyVault" -or $null -eq $args[0]) {
           $true
       } else {
           throw "You can only specify -imageRegistryKvUserNameId if -imageRegistryCredType is 'KeyVault'."
       }
   })]
   [string] $imageRegistryKvUserNameId,
   
   [Parameter(HelpMessage = "KeyVault Secret password identifier.")]
   [ValidateScript({
       if ($imageRegistryCredType -eq "KeyVault" -or $null -eq $args[0]) {
           $true
       } else {
           throw "You can only specify -imageRegistryKvPasswordId if -imageRegistryCredType is 'KeyVault'."
       }
   })]
   [string] $imageRegistryKvPasswordId,
   
   [Parameter(HelpMessage = "Name of the managed identity for the image registry (defaults to mi-learning-loop).")]
   [ValidateScript({
       if ($imageRegistryCredType -eq "ManagedIdentity" -or $null -eq $args[0]) {
           $true
       } else {
           throw "You can only specify imageRegistryManagedIdentityName if -imageRegistryCredType is 'ManagedIdentity'."
       }
   })]
   [string] $imageRegistryManagedIdentityName = "mi-learning-loop"
)

# Globals -- these are used in the functions below (TODO: refactor to pass as parameters)
$imageHost = ""

function GetAzAccount {
   $account = az account show --output json | ConvertFrom-Json
   if ($account) {
      return $account
   }
   else {
      throw "Not logged in. Please login using 'az login'."
   }
}

function KeyVaultExists {
   $keyVault = az keyvault show --name $imageRegistryKeyVaultName --resource-group $resourceGroupName --query "name" --output tsv 2>$null
   if ($LASTEXITCODE -ne 0) {
      return $false
   }
   return $null -ne $keyVault
}

function GetNormalizedLoopName {
   param (
      [string]$loopName
   )

   $adjustedLoopName = $loopName.ToLower()
   $adjustedLoopName = $adjustedLoopName -replace '_', '-' # change _ to -
   $adjustedLoopName = $adjustedLoopName -replace '[^a-zA-Z0-9-]', '' # Remove invalid characters
   $adjustedLoopName = $adjustedLoopName -replace '--+', '-' # Replace consecutive dashes with a single dash
   $adjustedLoopName = $adjustedLoopName.Trim('-') # Remove leading and trailing dashes
   if ($adjustedLoopName -match '^[^a-zA-Z]') {
      $adjustedLoopName = "a$adjustedLoopName" # Ensure it starts with a letter
   }
   return $adjustedLoopName
}

function ValidateAndDefaultParameters {
   $account = GetAzAccount
   $normalizedLoopName = GetNormalizedLoopName $loopName
   if ($normalizedLoopName -ne $loopName) {
      $loopName = $normalizedLoopName
      Write-Host "Adjusted loop name to: '$loopName'" -ForegroundColor Yellow
   }
   
   # Set default value for acrName if dockerUserOrOrgName is not provided
   if ([string]::IsNullOrEmpty($dockerUserOrOrgName) -and [string]::IsNullOrEmpty($acrName)) {
      $script:acrName = "acrlearningloop"
      Write-Host "ACR name defaulted to '$acrName'" -ForegroundColor Yellow
   }
   
   if ($imageRegistryCredType -eq "KeyVault") {
      if ([string]::IsNullOrEmpty($imageRegistryKvSubscriptionId)) {
         $script:imageRegistryKvSubscriptionId = $account.id
         Write-Host "KeyVault subscription defaulted to '$imageRegistryKvSubscriptionId'" -ForegroundColor Yellow
      }
      if ([string]::IsNullOrEmpty($imageRegistryKvUserNameId)) {
         $script:imageRegistryKvUserNameId = "$loopName-username"
         Write-Host "KeyVault username id defaulted to '$imageRegistryKvUserNameId'" -ForegroundColor Yellow 
      }
      if ([string]::IsNullOrEmpty($imageRegistryKvPasswordId)) {
         $script:imageRegistryKvPasswordId = "$loopName-password"
         Write-Host "KeyVault password id defaulted to '$imageRegistryKvPasswordId'" -ForegroundColor Yellow
      }
   }

   # TODO: fix $script:imageHost
   if ([string]::IsNullOrEmpty($dockerUserOrOrgName) -eq $false) {
      $script:imageHost = "docker.io"
   }
   elseif ($null -ne $acrName) {
      $script:imageHost = "$acrName.azurecr.io"
   }
   else {
      throw "You must specify either -dockerUserOrOrgName or -acrName."
   }

   Write-Host "Docker repository is '$script:imageHost'" -ForegroundColor Yellow
   Write-Host ""
}

function DisplayParameters {
   $paramterList = @{};

   Write-Host "The deployment will execute with the following parameters:" -ForegroundColor Yellow
   if ($noDeploy -eq $true) {
      $paramterList["noDeploy"] = @{ Value = $noDeploy; Note = "Generates the bicep params file ${bicepParamsFile}, but will NOT deploy the resources" }
   }
   else {
      $paramterList["noDeploy"] = @{ Value = $noDeploy; Note = "Generate the bicep params file ${bicepParamsFile}, AND will deploy the resources" }
   }
   if ($loopNameAdjusted) {
      $paramterList["loopName"] = @{ Value = $loopName; Note = "Adjusted loopName for deployment" }
   }
   else {
      $paramterList["loopName"] = @{ Value = $loopName; Note = "" }
   }

   if ($skipSetupEnvironemt -eq $true) {
      $paramterList["skipSetupEnvironemt"] = @{ Value = $skipSetupEnvironemt; Note = "Will not deploy the resource group (it must exist)" }
   }
   else {
      $paramterList["skipSetupEnvironemt"] = @{ Value = $skipSetupEnvironemt; Note = "Create the resource group and dependencies" }
   }

   $paramterList["enableTrainer"] = @{ Value = $enableTrainer; Note = "" }
   $paramterList["enableJoiner"] = @{ Value = $enableJoiner; Note = "" }
   $paramterList["resourceGroupName"] = @{ Value = $resourceGroupName; Note = "" }
   $paramterList["location"] = @{ Value = $location; Note = "" }
   $paramterList["loadAndPushDockerImage"] = @{ Value = $loadAndPushDockerImage; Note = "" }
   $paramterList["dockerImageTar"] = @{ Value = $dockerImageTar; Note = "" }
   $paramterList["dockerImageName"] = @{ Value = $dockerImageName; Note = "" }
   $paramterList["dockerImageTag"] = @{ Value = $dockerImageTag; Note = "" }
   $paramterList["dockerUserOrOrgName"] = @{ Value = $dockerUserOrOrgName; Note = "" }
   $paramterList["acrName"] = @{ Value = $acrName; Note = "" }
   $paramterList["imageRegistryCredType"] = @{ Value = $imageRegistryCredType; Note = "" }

   if ($imageRegistryCredType -eq "KeyVault") {
      $paramterList["imageRegistryKeyVaultName"] = @{ Value = $imageRegistryKeyVaultName; Note = "" }
      $paramterList["imageRegistryKvSubscriptionId"] = @{ Value = $imageRegistryKvSubscriptionId; Note = "" }
      $paramterList["imageRegistryKvUserNameId"] = @{ Value = $imageRegistryKvUserNameId; Note = "" }
      $paramterList["imageRegistryKvPasswordId"] = @{ Value = $imageRegistryKvPasswordId; Note = "" }
   }
   elseif ($imageRegistryCredType -eq "ManagedIdentity") {
      $paramterList["imageRegistryManagedIdentityName"] = @{ Value = $imageRegistryManagedIdentityName; Note = "" }
   }
   $paramterList | Format-Table -Property @{Label="Parameter"; Expression={$_.Key}}, @{Label="Value"; Expression={$_.Value.Value}}, @{Label="Note"; Expression={$_.Value.Note}} -AutoSize
}

function GeneratedParametersFile {
   $finalImageName = $dockerImageName
   if ([string]::IsNullOrEmpty($dockerUserOrOrgName) -eq $false) {
      $finalImageName = "$dockerUserOrOrgName/$dockerImageName"
   }

   $keyVaultParams = "";
   if ($imageRegistryCredType -eq "KeyVault") {
      $keyVaultParams = @"
param kvImageRegistryUsername = getSecret('$imageRegistryKvSubscriptionId', '$resourceGroupName', '$imageRegistryKeyVaultName', '$imageRegistryKvUserNameId')
param kvImageRegistryPassword = getSecret('$imageRegistryKvSubscriptionId', '$resourceGroupName', '$imageRegistryKeyVaultName', '$imageRegistryKvPasswordId')
"@
   }
   
   $imageCredentials = "";
   if ($imageRegistryCredType -eq "ManagedIdentity") {
      $imageCredentials = @"
{
   type: 'managedIdentity'
   username: '$imageRegistryManagedIdentityName'
}
"@
   }
   elseif ($imageRegistryCredType -eq "KeyVault") { 
      $imageCredentials = @"
{
   type: 'keyVault'
}
"@
   }
  
   $bicepParams = @"
//
// bicep pameters file generated by 'deploy-sample.ps1'
//
using 'main.bicep'
$keyVaultParams
param mainConfig = {
   appName: '$loopName'
   environmentVars: [
      {
      name: 'ExperimentalUnitDuration'
      value: '0:0:10'
      }
      {
      name: 'TrainerEnabled'
      value: $($enableTrainer.ToString().ToLower())
      }
      {
      name: 'JoinerEnabled'
      value: $($enableJoiner.ToString().ToLower())
      }
      {
      name: 'MachineLearningArguments'
      value: '--cb_explore_adf --epsilon 0.2 --power_t 0 -l 0.001 --cb_type ips -q ::'
      }
      {
      name: 'LastConfigurationEditDate'
      value: '2024-01-01'
      }
   ]
   resourceTags: {
      deploymentGroupName: '$loopName'
   }
   storage: {
      sku: 'Standard_LRS'
      kind: 'StorageV2'
   }
   eventhub: {
      capacity: 1
      partitionCount: 4
      sku: 'Standard'
      messageRetentionDays: 1
   }
   container: {
      cpuCores: 4
      memoryGig: 16
      image: {
      registry: {
         host: '$script:imageHost'
         credentials: $imageCredentials
      }
      name: '$finalImageName'
      tag: '$dockerImageTag'
      }
   }
}
"@
   
   $bicepParams | Out-File -FilePath $bicepParamsFile -Encoding utf8
   Write-Host "Bicep parameters file generated: $bicepParamsFile" -ForegroundColor Yellow
}

function TryVerifyDocker {
   docker info >$null 2>&1
   if ($LASTEXITCODE -ne 0) {
      throw "Failed to start Docker. Please start Docker and try again."
   }
   else {
      Write-Host "Docker is running" -ForegroundColor Green
   }
}

function TryCreateCredentials {
   # setup image registry credentials
   if ($imageRegistryCredType -eq "ManagedIdentity") {
      $identity = az identity show --name $imageRegistryManagedIdentityName --resource-group $resourceGroupName --query "name" --output tsv 2>$null
      if ($null -eq $identity) {
         Write-Host "Creating Managed Identity '$imageRegistryManagedIdentityName' in resource group '$resourceGroupName'." -ForegroundColor Yellow
         $result = az identity create --name $imageRegistryManagedIdentityName --resource-group $resourceGroupName --location $location
         if ($result) {
            Write-Host "Managed Identity '$imageRegistryManagedIdentityName' created in resource group '$resourceGroupName'." -ForegroundColor Green
         }
         else {
            throw "Failed to create Managed Identity '$imageRegistryManagedIdentityName' in resource group '$resourceGroupName'."
         }
      }
      else {
         Write-Host "Managed Identity '$imageRegistryManagedIdentityName' already exists in resource group '$resourceGroupName'." -FopregroundColor Green
      }
   }
   elseif ($imageRegistryCredType -eq "KeyVault") {
      $keyVault = az keyvault show --name $imageRegistryKeyVaultName --resource-group $resourceGroupName --query "name" --output tsv 2>$null
      if ($null -eq $keyVault) {
         Write-Host "Creating KeyVault '$imageRegistryKeyVaultName' in resource group '$resourceGroupName'." -ForegroundColor Yellow
         $result = az keyvault create --name $imageRegistryKeyVaultName --resource-group $resourceGroupName --location $location
         if ($result) {
            Write-Host "KeyVault '$imageRegistryKeyVaultName' created in resource group '$resourceGroupName'." -ForegroundColor Green
         }
         else {
            throw "Failed to create KeyVault '$imageRegistryKeyVaultName' in resource group '$resourceGroupName'."
         }
      }
      else {
         Write-Host "KeyVault '$imageRegistryKeyVaultName' already exists in resource group '$resourceGroupName'." -ForegroundColor Green
      }
   
      $secretUsername = Read-Host -Prompt "Enter your username" -AsSecureString
      $secretPassword = Read-Host -Prompt "Enter your password" -AsSecureString
      $usernamePlainText = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secretUsername))
      $passwordPlainText = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secretPassword))
      $principalId = az ad signed-in-user show --query objectId --output tsv
      if ($principalId) {
         # todo: check success of the following
         az keyvault set-policy --name $imageRegistryKeyVaultName --object-id $principalId --secret-permissions set get
         az keyvault secret set --vault-name $imageRegistryKeyVaultName --name $imageRegistryKvUserNameId --value $usernamePlainText
         az keyvault secret set --vault-name $imageRegistryKeyVaultName --name $imageRegistryKvPasswordId --value $passwordPlainText
      }
      $usernamePlainText = $null
      $passwordPlainText = $null
   }
}

function TryPushDockerImage
{
   Write-Host "Loading docker image: $dockerImageTar" -ForegroundColor Yellow
   docker load -i $dockerImageTar
   if ($LASTEXITCODE -eq 0) {
      Write-Host "Docker image loaded successfully." -ForegroundColor Green
   } else {
      throw "Failed to load Docker image."
   }

   $fullDockerImage = "";
   if ([string]::IsNullOrEmpty($dockerUserOrOrgName) -eq $false) {
      docker login
      if ($LASTEXITCODE -eq 0) {
         Write-Host "Docker login succeeded." -ForegroundColor Green
      } else {
         throw "Docker login failed."
      }
      $fullDockerImage = "$dockerUserOrOrgName/$dockerImageName"
   }
   elseif ([string]::IsNullOrEmpty($acrName) -eq $false) {
      az acr login --name $acrName
      if ($LASTEXITCODE -eq 0) {
         Write-Host "Azure Container Registry login succeeded." -ForegroundColor Green
      } else {
         throw "Azure Container Registry login failed."
      }
      $fullDockerImage = "${script:imageHost}/${dockerImageName}:${dockerImageTag}"
   }
   else {
      throw "You must specify either -dockerUserOrOrgName or -acrName."
   }

   Write-Host "Tagging docker image ${dockerImageName}:${dockerImageTag} -> $fullDockerImage" -ForegroundColor Yellow
   docker tag ${dockerImageName}:${dockerImageTag} $fullDockerImage
   if ($LASTEXITCODE -eq 0) {
      Write-Host "Docker tag ${dockerImageName}:${dockerImageTag} -> $fullDockerImage succeeded." -ForegroundColor Green
   } else {
      throw "Docker tag ${dockerImageName}:${dockerImageTag} -> $fullDockerImage failed."
   }

   Write-Host "Pushing docker image... $fullDockerImage" -ForegroundColor Yellow
   docker push $fullDockerImage
   if ($LASTEXITCODE -eq 0) {
      Write-Host "Docker push $fullDockerImage succeeded." -ForegroundColor Green
   } else {
      throw "Docker push $fullDockerImage failed."
   }
}

function PromptSecure {
   param (
      [string]$prompt
   )

   $secureString = Read-Host -Prompt $prompt -AsSecureString
   $plainText = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureString))
   return $plainText
}

function TrySetupEnvironment {
   Write-Host "Deploying environment to resource group '$resourceGroupName' in location '$location'." -ForegroundColor Yellow
   $createKeyVault = ($imageRegistryCredType -eq "KeyVault") -and ((KeyVaultExists) -eq $false)
   if ($createKeyVault) {
      $registryUsername = PromptSecure -Prompt "Enter the username for the image registry"
      $registryPassword = PromptSecure -Prompt "Enter the password for the image registry"

      $userObjectId = (az ad signed-in-user show --query 'id' --output tsv)
      Write-Host "`texecuting az command: $azResult = az deployment sub create --location $location --name "$loopName-environment" --template-file .\environment.bicep --parameters resourceGroupName=$resourceGroupName managedIdentityName=$imageRegistryManagedIdentityName keyVaultName=$imageRegistryKeyVaultName imageRegistryUsernameId=$imageRegistryKvUserNameId imageRegistryUsername=********** imageRegistryPasswordId=$imageRegistryKvPasswordId imageRegistryPassword=************ userObjectId=$userObjectId" -ForegroundColor Gray
      $azResult = az deployment sub create `
      --location $location `
      --name "$loopName-environment" `
      --template-file .\environment.bicep `
      --parameters resourceGroupName=$resourceGroupName managedIdentityName=$imageRegistryManagedIdentityName keyVaultName=$imageRegistryKeyVaultName imageRegistryUsernameId=$imageRegistryKvUserNameId imageRegistryUsername=$registryUsername imageRegistryPasswordId=$imageRegistryKvPasswordId imageRegistryPassword=$registryPassword userObjectId=$userObjectId
      $registryPassword = $null
      $registryUsername = $null
      }
   else {
      Write-Host "`texecuting az command: az deployment sub create --location $location --name "$loopName-environment" --template-file .\environment.bicep --parameters resourceGroupName=$resourceGroupName acrName=$acrName managedIdentityName=$imageRegistryManagedIdentityName" -ForegroundColor Gray
      $azResult = az deployment sub create `
      --location $location `
      --name "$loopName-environment" `
      --template-file .\environment.bicep `
      --parameters resourceGroupName=$resourceGroupName acrName=$acrName managedIdentityName=$imageRegistryManagedIdentityName
   }
   $azResultJson = $azResult | ConvertFrom-Json
   if ($azResultJson.properties.provisioningState -eq "Succeeded") {
      Write-Host "Environment deployment succeeded." -ForegroundColor Green
   }
   else {
      throw "Environment deployment failed: $azResultJson"
   }
}

function TryDeployLoop {
   Write-Host "Deployment started... using bicep parameters file: $bicepParamsFile" -ForegroundColor Yellow
   Write-Host "`texecuting az command: az deployment group create --resource-group $resourceGroupName --name $loopName --parameters $bicepParamsFile" -ForegroundColor Gray
   $azResult = az deployment group create --resource-group $resourceGroupName --name $loopName --parameters $bicepParamsFile
   $azResultJson = $azResult | ConvertFrom-Json
   if ($azResultJson.properties.provisioningState -eq "Succeeded") {
      Write-Host "Deployment succeeded." -ForegroundColor Green
   }
   else {
      throw "Deployment failed: $azResultJson" 
   }
}

function TryVerifyAccountInfo {
   $account = GetAzAccount
   Write-Host "Logged in as: " -NoNewline
   Write-Host "$($account.user.name) ($($account.user.type))" -ForegroundColor Green
   Write-Host "Subscription: " -NoNewline
   Write-Host "$($account.name) - $($account.id)" -ForegroundColor Green
   Write-Host ""
}

#############################################################################
# Main script
try {
   TryVerifyDocker
   TryVerifyAccountInfo
   ValidateAndDefaultParameters
   DisplayParameters
   GeneratedParametersFile

   if ($noDeploy) {
      Write-Host "Done... skipping deployment (noDeploy: $noDeploy)" -ForegroundColor Yellow
      exit 0
   }

   $continue = Read-Host "Would you like to continue with the deployment? (yes/no)"
   if ($continue -ne "yes") {
      Write-Host "Deployment aborted by the user." -ForegroundColor Yellow
      exit 0
   }

   if ($skipSetupEnvironemt -eq $false) {
      TrySetupEnvironment
   }

   if ($loadAndPushDockerImage -eq $true) {
      TryPushDockerImage
   }

   TryDeployLoop
}
catch {
    Write-Host "An error occurred: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "Full error details: $($_ | Out-String)"  -ForegroundColor Red
    exit 1
}
