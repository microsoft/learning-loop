{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.30.23.60470",
      "templateHash": "7466387753210071674"
    }
  },
  "definitions": {
    "_1.environmentConfigT": {
      "type": "object",
      "properties": {
        "resourceGroupName": {
          "type": "string",
          "metadata": {
            "description": "The name of the resource group in which the resources will be deployed."
          }
        },
        "createManagedIdentity": {
          "type": "bool",
          "metadata": {
            "description": "Indicates if the managed identity should be created or used from an existing one."
          }
        },
        "generateManagedIdentityName": {
          "type": "bool",
          "metadata": {
            "description": "Indicates if the managed identity name should be generated or use the supplied name."
          }
        },
        "managedIdentityName": {
          "type": "string",
          "metadata": {
            "description": "The name of the managed identity to use; if generateManagedIdentityName is true, the name will be altered to be unique within the resource group."
          }
        },
        "userRoleAssignmentPrincipalId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "The deployment users principal id to be used for the user role assignment."
          }
        },
        "loopConfig": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The application id (appId) of the Learning Loop."
              }
            },
            "environmentVars": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "nullable": true,
              "metadata": {
                "description": "Application environment variables from TrainerConfig, JoinerConfig, LogRetentionConfig, and TrainingMonitoringConfig"
              }
            },
            "eventHub": {
              "type": "object",
              "properties": {
                "capacity": {
                  "type": "int"
                },
                "partitionCount": {
                  "type": "int"
                },
                "messageRetentionDays": {
                  "type": "int"
                }
              },
              "metadata": {
                "description": "Event hub parameters"
              }
            },
            "container": {
              "type": "object",
              "properties": {
                "cpuCores": {
                  "type": "int"
                },
                "memoryGig": {
                  "type": "int"
                }
              },
              "metadata": {
                "description": "Container parameters"
              }
            }
          },
          "metadata": {
            "description": "Parameters used to generate the application deployment bicep parameters for Leaning Loop deployment."
          }
        },
        "image": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Docker image name as stored in the image repository."
              }
            },
            "tag": {
              "type": "string",
              "metadata": {
                "description": "Docker image tag"
              }
            },
            "properties": {
              "type": "object",
              "properties": {
                "kind": {
                  "$ref": "#/definitions/_1.imageRepositoryKind",
                  "metadata": {
                    "description": "Kind of image repository to use (either acr or dockerhub)."
                  }
                },
                "createAcr": {
                  "type": "bool",
                  "metadata": {
                    "description": "Indicates if the acr should be created or used from an existing one. Effective only if kind is acr."
                  }
                },
                "repositoryName": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of image repository to use. Effective only if kind is acr."
                  }
                },
                "generateRepoName": {
                  "type": "bool",
                  "metadata": {
                    "description": "Indicates if the image repository name should be generated or use the supplied name.  Effective only if kind is acr."
                  }
                },
                "credentials": {
                  "type": "object",
                  "properties": {
                    "keyVault": {
                      "type": "object",
                      "properties": {
                        "keyVaultName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "The key vault name to use to access the image repository."
                          }
                        },
                        "createKeyVault": {
                          "type": "bool",
                          "metadata": {
                            "description": "Indicates if the key vault should be created or used from an existing one."
                          }
                        },
                        "kvSubscriptionId": {
                          "type": "string",
                          "metadata": {
                            "description": "The subscription id of the key vault to use to access the image repository."
                          }
                        },
                        "kvUserNameId": {
                          "type": "string",
                          "metadata": {
                            "description": "The key vault secret id for the user name to access a dockerhub image repository."
                          }
                        },
                        "kvUsername": {
                          "type": "securestring",
                          "metadata": {
                            "description": "The user name to store in the key vault."
                          }
                        },
                        "kvPasswordId": {
                          "type": "string",
                          "metadata": {
                            "description": "The key vault secret id for the password to access a dockerhub image repository."
                          }
                        },
                        "kvPassword": {
                          "type": "securestring",
                          "metadata": {
                            "description": "The password secret to store in the key vault."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "The key vault details used to access the image repository."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "The credentials to use to access the image repository. Effective only if kind is dockerhub."
                  }
                }
              },
              "metadata": {
                "description": "Image repository properties"
              }
            }
          },
          "metadata": {
            "description": "Learning Loop image repository configuration"
          }
        },
        "metrics": {
          "type": "object",
          "properties": {
            "applicationInsightsName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The name of the application insights instance to use to store metrics."
              }
            },
            "createApplicationInsights": {
              "type": "bool",
              "metadata": {
                "description": "True to create a new application insights instance, false to use an existing one."
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Application insights parameters"
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "modules/environmentconfigtypes.bicep"
        }
      }
    },
    "_1.imageRepositoryKind": {
      "type": "string",
      "allowedValues": [
        "acr",
        "dockerhub"
      ],
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "modules/environmentconfigtypes.bicep"
        }
      }
    }
  },
  "parameters": {
    "config": {
      "$ref": "#/definitions/_1.environmentConfigT",
      "metadata": {
        "description": "Environment setup for the deployment"
      }
    },
    "userObjectIdOverride": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The user object id to assign the role to (overrides params file value)."
      }
    },
    "imageRegistryUsername": {
      "type": "securestring",
      "nullable": true,
      "metadata": {
        "description": "The username for the image registry (overrides params file value)."
      }
    },
    "imageRegistryPassword": {
      "type": "securestring",
      "nullable": true,
      "metadata": {
        "description": "The password for the image registry (overrides params file value)."
      }
    }
  },
  "variables": {
    "userRoleAssignmentPrincipalId": "[if(empty(parameters('userObjectIdOverride')), parameters('config').userRoleAssignmentPrincipalId, parameters('userObjectIdOverride'))]",
    "generatedManagedIdentityName": "[format('mi-{0}-{1}', take(parameters('config').managedIdentityName, 111), uniqueString(tenant().tenantId))]",
    "finalManagedIdentityName": "[if(parameters('config').generateManagedIdentityName, variables('generatedManagedIdentityName'), parameters('config').managedIdentityName)]",
    "useAcr": "[equals(parameters('config').image.properties.kind, 'acr')]",
    "generateAcrRepoName": "[and(and(variables('useAcr'), parameters('config').image.properties.createAcr), parameters('config').image.properties.generateRepoName)]",
    "finalAcrName": "[if(variables('generateAcrRepoName'), format('acr{0}{1}', take(parameters('config').image.properties.repositoryName, 33), uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('config').resourceGroupName))), parameters('config').image.properties.repositoryName)]",
    "useKeyVault": "[and(not(equals(parameters('config').image.properties.kind, 'acr')), not(empty(parameters('config').image.properties.credentials.keyVault)))]",
    "generateKeyVaultName": "[and(variables('useKeyVault'), parameters('config').image.properties.credentials.keyVault.createKeyVault)]",
    "finalKeyVaultName": "[if(variables('generateKeyVaultName'), format('{0}-{1}-kv', take(parameters('config').resourceGroupName, 7), uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('config').resourceGroupName))), if(variables('useKeyVault'), parameters('config').image.properties.credentials.keyVault.keyVaultName, null()))]",
    "useMetrics": "[not(equals(parameters('config').metrics, null()))]",
    "generateAppInsightsName": "[and(variables('useMetrics'), parameters('config').metrics.createApplicationInsights)]",
    "appInsightsName": "[if(and(variables('useMetrics'), not(equals(parameters('config').metrics.applicationInsightsName, null()))), parameters('config').metrics.applicationInsightsName, parameters('config').resourceGroupName)]"
  },
  "resources": {
    "learningLoopRg": {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[parameters('config').resourceGroupName]",
      "location": "[deployment().location]"
    },
    "managedIdentity": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "managedIdentity",
      "resourceGroup": "[parameters('config').resourceGroupName]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('finalManagedIdentityName')]"
          },
          "createManagedIdentity": {
            "value": "[parameters('config').createManagedIdentity]"
          },
          "location": {
            "value": "[deployment().location]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "1005270708651379085"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location where the resources will be deployed"
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the managed identity"
              }
            },
            "createManagedIdentity": {
              "type": "bool",
              "defaultValue": true
            }
          },
          "resources": [
            {
              "condition": "[parameters('createManagedIdentity')]",
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]"
            }
          ],
          "outputs": {
            "principalId": {
              "type": "string",
              "value": "[if(parameters('createManagedIdentity'), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId)]"
            },
            "managedIdentityName": {
              "type": "string",
              "value": "[if(parameters('createManagedIdentity'), parameters('name'), parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "learningLoopRg"
      ]
    },
    "containerRegistry": {
      "condition": "[variables('useAcr')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "containerRegistry",
      "resourceGroup": "[parameters('config').resourceGroupName]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "createAcr": {
            "value": "[parameters('config').image.properties.createAcr]"
          },
          "acrName": {
            "value": "[variables('finalAcrName')]"
          },
          "location": {
            "value": "[deployment().location]"
          },
          "roleAssignmentPrincipalId": {
            "value": "[reference('managedIdentity').outputs.principalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "6969755161473020621"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location where the resources will be deployed."
              }
            },
            "acrName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Container Registry."
              }
            },
            "createAcr": {
              "type": "bool",
              "metadata": {
                "description": "Create the Acr or retrieve an existing acr and assign the role."
              }
            },
            "roleAssignmentPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID for the role assignment."
              }
            }
          },
          "resources": [
            {
              "condition": "[parameters('createAcr')]",
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2023-01-01-preview",
              "name": "[parameters('acrName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "adminUserEnabled": false
              }
            },
            {
              "condition": "[parameters('createAcr')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('acrName'))]",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName')), 'AcrPull', parameters('acrName'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                "principalId": "[parameters('roleAssignmentPrincipalId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName'))]"
              ]
            },
            {
              "condition": "[not(parameters('createAcr'))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('acrName'))]",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName')), 'AcrPull', parameters('acrName'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                "principalId": "[parameters('roleAssignmentPrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "acrName": {
              "type": "string",
              "value": "[if(parameters('createAcr'), parameters('acrName'), parameters('acrName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "learningLoopRg",
        "managedIdentity"
      ]
    },
    "keyVault": {
      "condition": "[and(variables('useKeyVault'), parameters('config').image.properties.credentials.keyVault.createKeyVault)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "keyVault",
      "resourceGroup": "[parameters('config').resourceGroupName]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[variables('finalKeyVaultName')]"
          },
          "location": {
            "value": "[deployment().location]"
          },
          "userPrincipalId": {
            "value": "[variables('userRoleAssignmentPrincipalId')]"
          },
          "managedIdentityPrincipalId": {
            "value": "[reference('managedIdentity').outputs.principalId.value]"
          },
          "kvImageRegistryUsernameId": {
            "value": "[parameters('config').image.properties.credentials.keyVault.kvUserNameId]"
          },
          "kvImageRegistryUsername": {
            "value": "[coalesce(parameters('imageRegistryUsername'), parameters('config').image.properties.credentials.keyVault.kvUsername)]"
          },
          "kvImageRegistryPasswordId": {
            "value": "[parameters('config').image.properties.credentials.keyVault.kvPasswordId]"
          },
          "kvImageRegistryPassword": {
            "value": "[coalesce(parameters('imageRegistryPassword'), parameters('config').image.properties.credentials.keyVault.kvPassword)]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "10437106914993771215"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Key Vault."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location where the Key Vault will be deployed."
              }
            },
            "kvImageRegistryUsernameId": {
              "type": "securestring",
              "metadata": {
                "description": "The Key Vault secret ID for the image registry username."
              }
            },
            "kvImageRegistryPasswordId": {
              "type": "securestring",
              "metadata": {
                "description": "The Key Vault secret ID for the image registry password."
              }
            },
            "kvImageRegistryUsername": {
              "type": "securestring",
              "metadata": {
                "description": "The image registry username stored in Key Vault."
              }
            },
            "kvImageRegistryPassword": {
              "type": "securestring",
              "metadata": {
                "description": "The image registry password stored in Key Vault."
              }
            },
            "managedIdentityPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the managed identity."
              }
            },
            "userPrincipalId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The principal ID of the deployment user."
              }
            },
            "secrets": {
              "type": "array",
              "defaultValue": [
                {
                  "name": "[parameters('kvImageRegistryUsernameId')]",
                  "value": "[parameters('kvImageRegistryUsername')]"
                },
                {
                  "name": "[parameters('kvImageRegistryPasswordId')]",
                  "value": "[parameters('kvImageRegistryPassword')]"
                }
              ]
            }
          },
          "variables": {
            "userAccessPolicy": "[if(not(empty(parameters('userPrincipalId'))), createObject('tenantId', subscription().tenantId, 'objectId', parameters('userPrincipalId'), 'permissions', createObject('keys', createArray(), 'secrets', createArray('get', 'list', 'set', 'delete'), 'certificates', createArray())), createObject())]",
            "managedIdentityAcessPolicy": {
              "tenantId": "[subscription().tenantId]",
              "objectId": "[parameters('managedIdentityPrincipalId')]",
              "permissions": {
                "keys": [],
                "secrets": [
                  "get",
                  "list"
                ],
                "certificates": []
              }
            },
            "finalAccessPolicies": "[if(not(empty(parameters('userPrincipalId'))), createArray(variables('userAccessPolicy'), variables('managedIdentityAcessPolicy')), createArray(variables('managedIdentityAcessPolicy')))]"
          },
          "resources": {
            "keyVault": {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-10-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "tenantId": "[subscription().tenantId]",
                "enableSoftDelete": false,
                "enabledForTemplateDeployment": true,
                "accessPolicies": "[variables('finalAccessPolicies')]"
              }
            },
            "keyVaultSecrets": {
              "copy": {
                "name": "keyVaultSecrets",
                "count": "[length(parameters('secrets'))]"
              },
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-10-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), format('{0}', parameters('secrets')[copyIndex()].name))]",
              "properties": {
                "value": "[parameters('secrets')[copyIndex()].value]"
              },
              "dependsOn": [
                "keyVault"
              ]
            }
          },
          "outputs": {
            "keyVaultName": {
              "type": "string",
              "value": "[if(empty(reference('keyVault', '2021-10-01', 'full')), '', parameters('keyVaultName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "learningLoopRg",
        "managedIdentity"
      ]
    },
    "appInsights": {
      "condition": "[variables('useMetrics')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appInsights",
      "resourceGroup": "[parameters('config').resourceGroupName]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "create": {
            "value": "[parameters('config').metrics.createApplicationInsights]"
          },
          "generateName": {
            "value": "[variables('generateAppInsightsName')]"
          },
          "insightsName": {
            "value": "[variables('appInsightsName')]"
          },
          "location": {
            "value": "[deployment().location]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "11229016089804553556"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location where the Key Vault will be deployed."
              }
            },
            "insightsName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Application Insights instance."
              }
            },
            "generateName": {
              "type": "bool",
              "metadata": {
                "description": "If true, a unique name will be generated for the Application Insights instance."
              }
            },
            "create": {
              "type": "bool",
              "metadata": {
                "description": "If true, the Application Insights instance will be created; otherwise, the existing resource will be used."
              }
            }
          },
          "variables": {
            "finalAppInsightsName": "[if(parameters('generateName'), format('ai-{0}-{1}', take(parameters('insightsName'), 128), uniqueString(subscription().tenantId, parameters('location'))), parameters('insightsName'))]"
          },
          "resources": [
            {
              "condition": "[parameters('create')]",
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[variables('finalAppInsightsName')]",
              "location": "[parameters('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web"
              }
            }
          ],
          "outputs": {
            "applicationInsightsConnectionString": {
              "type": "string",
              "value": "[if(parameters('create'), reference(resourceId('Microsoft.Insights/components', variables('finalAppInsightsName')), '2020-02-02').ConnectionString, reference(resourceId('Microsoft.Insights/components', variables('finalAppInsightsName')), '2020-02-02').ConnectionString)]"
            },
            "applicationInsightsInstrumentationKey": {
              "type": "string",
              "value": "[if(parameters('create'), reference(resourceId('Microsoft.Insights/components', variables('finalAppInsightsName')), '2020-02-02').InstrumentationKey, reference(resourceId('Microsoft.Insights/components', variables('finalAppInsightsName')), '2020-02-02').InstrumentationKey)]"
            }
          }
        }
      },
      "dependsOn": [
        "learningLoopRg"
      ]
    },
    "appDeploymentParams": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appDeploymentParams",
      "resourceGroup": "[parameters('config').resourceGroupName]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "config": {
            "value": "[parameters('config')]"
          },
          "finalUserRoleAssignmentPrincipalId": {
            "value": "[coalesce(variables('userRoleAssignmentPrincipalId'), '')]"
          },
          "finalKeyVaultName": {
            "value": "[coalesce(variables('finalKeyVaultName'), '')]"
          },
          "finalAcrName": "[if(variables('useAcr'), createObject('value', reference('containerRegistry').outputs.acrName.value), createObject('value', ''))]",
          "finalManagedIdentityName": {
            "value": "[reference('managedIdentity').outputs.managedIdentityName.value]"
          },
          "appInsightsConnectionString": {
            "value": "[coalesce(reference('appInsights').outputs.applicationInsightsConnectionString.value, '')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "11836570874475569884"
            }
          },
          "definitions": {
            "_1.environmentConfigT": {
              "type": "object",
              "properties": {
                "resourceGroupName": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of the resource group in which the resources will be deployed."
                  }
                },
                "createManagedIdentity": {
                  "type": "bool",
                  "metadata": {
                    "description": "Indicates if the managed identity should be created or used from an existing one."
                  }
                },
                "generateManagedIdentityName": {
                  "type": "bool",
                  "metadata": {
                    "description": "Indicates if the managed identity name should be generated or use the supplied name."
                  }
                },
                "managedIdentityName": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of the managed identity to use; if generateManagedIdentityName is true, the name will be altered to be unique within the resource group."
                  }
                },
                "userRoleAssignmentPrincipalId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The deployment users principal id to be used for the user role assignment."
                  }
                },
                "loopConfig": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The application id (appId) of the Learning Loop."
                      }
                    },
                    "environmentVars": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Application environment variables from TrainerConfig, JoinerConfig, LogRetentionConfig, and TrainingMonitoringConfig"
                      }
                    },
                    "eventHub": {
                      "type": "object",
                      "properties": {
                        "capacity": {
                          "type": "int"
                        },
                        "partitionCount": {
                          "type": "int"
                        },
                        "messageRetentionDays": {
                          "type": "int"
                        }
                      },
                      "metadata": {
                        "description": "Event hub parameters"
                      }
                    },
                    "container": {
                      "type": "object",
                      "properties": {
                        "cpuCores": {
                          "type": "int"
                        },
                        "memoryGig": {
                          "type": "int"
                        }
                      },
                      "metadata": {
                        "description": "Container parameters"
                      }
                    }
                  },
                  "metadata": {
                    "description": "Parameters used to generate the application deployment bicep parameters for Leaning Loop deployment."
                  }
                },
                "image": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Docker image name as stored in the image repository."
                      }
                    },
                    "tag": {
                      "type": "string",
                      "metadata": {
                        "description": "Docker image tag"
                      }
                    },
                    "properties": {
                      "type": "object",
                      "properties": {
                        "kind": {
                          "$ref": "#/definitions/_1.imageRepositoryKind",
                          "metadata": {
                            "description": "Kind of image repository to use (either acr or dockerhub)."
                          }
                        },
                        "createAcr": {
                          "type": "bool",
                          "metadata": {
                            "description": "Indicates if the acr should be created or used from an existing one. Effective only if kind is acr."
                          }
                        },
                        "repositoryName": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of image repository to use. Effective only if kind is acr."
                          }
                        },
                        "generateRepoName": {
                          "type": "bool",
                          "metadata": {
                            "description": "Indicates if the image repository name should be generated or use the supplied name.  Effective only if kind is acr."
                          }
                        },
                        "credentials": {
                          "type": "object",
                          "properties": {
                            "keyVault": {
                              "type": "object",
                              "properties": {
                                "keyVaultName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "The key vault name to use to access the image repository."
                                  }
                                },
                                "createKeyVault": {
                                  "type": "bool",
                                  "metadata": {
                                    "description": "Indicates if the key vault should be created or used from an existing one."
                                  }
                                },
                                "kvSubscriptionId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The subscription id of the key vault to use to access the image repository."
                                  }
                                },
                                "kvUserNameId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The key vault secret id for the user name to access a dockerhub image repository."
                                  }
                                },
                                "kvUsername": {
                                  "type": "securestring",
                                  "metadata": {
                                    "description": "The user name to store in the key vault."
                                  }
                                },
                                "kvPasswordId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The key vault secret id for the password to access a dockerhub image repository."
                                  }
                                },
                                "kvPassword": {
                                  "type": "securestring",
                                  "metadata": {
                                    "description": "The password secret to store in the key vault."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "The key vault details used to access the image repository."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "The credentials to use to access the image repository. Effective only if kind is dockerhub."
                          }
                        }
                      },
                      "metadata": {
                        "description": "Image repository properties"
                      }
                    }
                  },
                  "metadata": {
                    "description": "Learning Loop image repository configuration"
                  }
                },
                "metrics": {
                  "type": "object",
                  "properties": {
                    "applicationInsightsName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "The name of the application insights instance to use to store metrics."
                      }
                    },
                    "createApplicationInsights": {
                      "type": "bool",
                      "metadata": {
                        "description": "True to create a new application insights instance, false to use an existing one."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Application insights parameters"
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "environmentconfigtypes.bicep"
                }
              }
            },
            "_1.imageRepositoryKind": {
              "type": "string",
              "allowedValues": [
                "acr",
                "dockerhub"
              ],
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "environmentconfigtypes.bicep"
                }
              }
            }
          },
          "parameters": {
            "config": {
              "$ref": "#/definitions/_1.environmentConfigT"
            },
            "finalUserRoleAssignmentPrincipalId": {
              "type": "string"
            },
            "finalKeyVaultName": {
              "type": "string"
            },
            "finalAcrName": {
              "type": "string"
            },
            "finalManagedIdentityName": {
              "type": "string"
            },
            "appInsightsConnectionString": {
              "type": "string"
            }
          },
          "variables": {
            "environmentVars": "[if(not(empty(parameters('config').loopConfig.environmentVars)), parameters('config').loopConfig.environmentVars, createArray())]",
            "environmentVarsStr": "[join(map(variables('environmentVars'), lambda('e', format('\t\t{{\n\t\t\tname: ''{0}''\n\t\t\tvalue: ''{1}''\n\t\t}}', lambdaVariables('e').name, lambdaVariables('e').value))), '\n')]",
            "kvSubscriptionId": "[if(equals(parameters('config').image.properties.kind, 'dockerhub'), parameters('config').image.properties.credentials.keyVault.kvSubscriptionId, '')]",
            "finalKvSubscriptionId": "[if(and(equals(parameters('config').image.properties.kind, 'dockerhub'), empty(variables('kvSubscriptionId'))), subscription().subscriptionId, variables('kvSubscriptionId'))]",
            "keyVaultSecretsVar_0": "[if(equals(parameters('config').image.properties.kind, 'acr'), '', replace('param kvImageRegistryUsername = getSecret(''{subscriptionid}'', ''{resourcegroup}'', ''{keyvaultname}'', ''{usersecretid}'')\nparam kvImageRegistryPassword = getSecret(''{subscriptionid}'', ''{resourcegroup}'', ''{keyvaultname}'', ''{passwordsecretid}'')\n', '{subscriptionid}', variables('finalKvSubscriptionId')))]",
            "keyVaultSecretsVar_1": "[if(equals(parameters('config').image.properties.kind, 'acr'), '', replace(variables('keyVaultSecretsVar_0'), '{resourcegroup}', parameters('config').resourceGroupName))]",
            "keyVaultSecretsVar_2": "[if(equals(parameters('config').image.properties.kind, 'acr'), '', replace(variables('keyVaultSecretsVar_1'), '{keyvaultname}', parameters('finalKeyVaultName')))]",
            "keyVaultSecretsVar_3": "[if(equals(parameters('config').image.properties.kind, 'acr'), '', replace(variables('keyVaultSecretsVar_2'), '{usersecretid}', parameters('config').image.properties.credentials.keyVault.kvUserNameId))]",
            "keyVaultSecretsVarFinal": "[if(equals(parameters('config').image.properties.kind, 'acr'), '', replace(variables('keyVaultSecretsVar_3'), '{passwordsecretid}', parameters('config').image.properties.credentials.keyVault.kvPasswordId))]",
            "keyVaultSecretsVar": "[variables('keyVaultSecretsVarFinal')]",
            "roleAssignmentUserObjectIdVarFinal": "[if(empty(parameters('finalUserRoleAssignmentPrincipalId')), 'roleAssignmentUserObjectId: null\n', replace('roleAssignmentUserObjectId: ''{0}''\n', '{0}', parameters('finalUserRoleAssignmentPrincipalId')))]",
            "roleAssignmentUserObjectIdVar": "[variables('roleAssignmentUserObjectIdVarFinal')]",
            "appInsightsEnvVarFinal": "[if(empty(parameters('appInsightsConnectionString')), '', replace('      {\n        name: ''AzureMonitorMetricExporterEnabled'' \n        value: ''true''\n      }\n      {\n        name: ''APPLICATIONINSIGHTS_CONNECTION_STRING'' \n        value: ''{0}''\n      }\n', '{0}', parameters('appInsightsConnectionString')))]",
            "appInsightsEnvVar": "[variables('appInsightsEnvVarFinal')]",
            "imageHostVar": "[if(equals(parameters('config').image.properties.kind, 'acr'), format('{0}.azurecr.io', parameters('finalAcrName')), 'docker.io')]",
            "imageCredsVarFinal": "[if(equals(parameters('config').image.properties.kind, 'acr'), replace('          credentials: {\n            type: ''managedIdentity''\n            username: ''{0}''\n          }\n', '{0}', parameters('finalManagedIdentityName')), '          credentials: {\n            type: ''keyVault''\n          }\n')]",
            "imageCredsVar": "[variables('imageCredsVarFinal')]",
            "appDeploymentParams_0": "[replace('//\n// bicep pameters file generated by ''deploy-sample.ps1''\n//\nusing ''main.bicep''\n{kvsecretvars}\nparam mainConfig = {\n   appName: ''{loopname}''\n   {roleAssignmentUserObjectId}\n   environmentVars: [\n{appInsightsEnv}\n{environmentVarsString}\n   ]\n   resourceTags: {\n      deploymentGroupName: ''{loopname}''\n   }\n   storage: {\n      sku: ''Standard_LRS''\n      kind: ''StorageV2''\n   }\n   eventhub: {\n      capacity: {eventhub-capacity}\n      partitionCount: {eventhub-partitioncount}\n      sku: ''Standard''\n      messageRetentionDays: {eventhub-messageretentiondays}\n   }\n   container: {\n      cpuCores: {container-cpucores}\n      memoryGig: {container-memorygig}\n      image: {\n        registry: {\n          host: ''{imageHost}''\n          {imageCreds}\n        }\n        name: ''{image-name}''\n        tag: ''{image-tag}''\n      }\n   }\n}\n', '{kvsecretvars}', variables('keyVaultSecretsVar'))]",
            "appDeploymentParams_1": "[replace(variables('appDeploymentParams_0'), '{roleAssignmentUserObjectId}', variables('roleAssignmentUserObjectIdVar'))]",
            "appDeploymentParams_2": "[replace(variables('appDeploymentParams_1'), '{appInsightsEnv}', variables('appInsightsEnvVar'))]",
            "appDeploymentParams_3": "[replace(variables('appDeploymentParams_2'), '{imageHost}', variables('imageHostVar'))]",
            "appDeploymentParams_4": "[replace(variables('appDeploymentParams_3'), '{imageCreds}', variables('imageCredsVar'))]",
            "appDeploymentParams_5": "[replace(variables('appDeploymentParams_4'), '{loopname}', parameters('config').loopConfig.name)]",
            "appDeploymentParams_6": "[replace(variables('appDeploymentParams_5'), '{eventhub-capacity}', string(parameters('config').loopConfig.eventHub.capacity))]",
            "appDeploymentParams_7": "[replace(variables('appDeploymentParams_6'), '{eventhub-partitioncount}', string(parameters('config').loopConfig.eventHub.partitionCount))]",
            "appDeploymentParams_8": "[replace(variables('appDeploymentParams_7'), '{eventhub-messageretentiondays}', string(parameters('config').loopConfig.eventHub.messageRetentionDays))]",
            "appDeploymentParams_9": "[replace(variables('appDeploymentParams_8'), '{container-cpucores}', string(parameters('config').loopConfig.container.cpuCores))]",
            "appDeploymentParams_10": "[replace(variables('appDeploymentParams_9'), '{container-memorygig}', string(parameters('config').loopConfig.container.memoryGig))]",
            "appDeploymentParams_11": "[replace(variables('appDeploymentParams_10'), '{image-name}', parameters('config').image.name)]",
            "appDeploymentParams_12": "[replace(variables('appDeploymentParams_11'), '{image-tag}', parameters('config').image.tag)]",
            "appDeploymentParamsFinal": "[replace(variables('appDeploymentParams_12'), '{environmentVarsString}', variables('environmentVarsStr'))]",
            "appDeploymentParams": "[variables('appDeploymentParamsFinal')]"
          },
          "resources": {},
          "outputs": {
            "loopDeploymentParams": {
              "type": "string",
              "value": "[variables('appDeploymentParams')]"
            },
            "imageHost": {
              "type": "string",
              "value": "[variables('imageHostVar')]"
            },
            "imageName": {
              "type": "string",
              "value": "[parameters('config').image.name]"
            },
            "imageTag": {
              "type": "string",
              "value": "[parameters('config').image.tag]"
            }
          }
        }
      },
      "dependsOn": [
        "appInsights",
        "containerRegistry",
        "learningLoopRg",
        "managedIdentity"
      ]
    }
  },
  "outputs": {
    "loopName": {
      "type": "string",
      "value": "[parameters('config').loopConfig.name]"
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[parameters('config').resourceGroupName]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[coalesce(variables('finalKeyVaultName'), '')]"
    },
    "acrName": {
      "type": "string",
      "value": "[if(variables('useAcr'), reference('containerRegistry').outputs.acrName.value, '')]"
    },
    "managedIdentityName": {
      "type": "string",
      "value": "[reference('managedIdentity').outputs.managedIdentityName.value]"
    },
    "appInsightsConnectionString": {
      "type": "string",
      "value": "[if(variables('useMetrics'), reference('appInsights').outputs.applicationInsightsConnectionString.value, '')]"
    },
    "appInsightsInstrumentationKey": {
      "type": "string",
      "value": "[if(variables('useMetrics'), reference('appInsights').outputs.applicationInsightsInstrumentationKey.value, '')]"
    },
    "loopDeploymentParams": {
      "type": "string",
      "value": "[reference('appDeploymentParams').outputs.loopDeploymentParams.value]"
    },
    "imageHost": {
      "type": "string",
      "value": "[reference('appDeploymentParams').outputs.imageHost.value]"
    },
    "imageName": {
      "type": "string",
      "value": "[reference('appDeploymentParams').outputs.imageName.value]"
    },
    "imageTag": {
      "type": "string",
      "value": "[reference('appDeploymentParams').outputs.imageTag.value]"
    }
  }
}