name: Build All

on:
  push:
    branches:
      - master
      - 'releases/**'
  pull_request:
    branches:
      - '*'
  # NOTE: allow manual triggering of the workflow for testing (remove before making public)
  workflow_dispatch:

env:
  VCPKG_DEFAULT_BINARY_CACHE: ${{github.workspace}}/vcpkg_binary_cache
  BUILD_ARTIFACTS: ${{github.workspace}}/artifacts

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  build-binary-parser:
    name: binary-parser-${{ matrix.build.build_type }}-${{ matrix.config.os_name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: "windows-latest", os_name: "windows-latest", vcpkg_target_triplet: "x64-windows-static", cmake_preset: "vcpkg-x64-windows-static", vw_bin_src: "vw.exe", vw_bin_dest: "vw-win-x64.exe" }
          - { os: "ubuntu-latest", os_name: "ubuntu-latest", vcpkg_target_triplet: "x64-linux", cmake_preset: "vcpkg-x64-linux-static", vw_bin_src: "vw", vw_bin_dest: "vw-linux-x64" }
          - { os: "macos-13", os_name: "macos-latest", vcpkg_target_triplet: "x64-osx", cmake_preset: "vcpkg-x64-osx-static", vw_bin_src: "vw", vw_bin_dest: "vw-macos-x64" }
        build:
          - { build_type: "debug" }
          - { build_type: "release" }
    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.config.vcpkg_target_triplet }}
      VW_BIN_SRC_PATH: ext_libs/build/reinforcement_learning/external_parser
      BINARY_ARTIFACTS_BASE_PATH: ${{github.workspace}}/artifacts/vw-bin/${{ matrix.build.build_type }}/${{ matrix.config.os_name }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - run: git -C ${{ github.workspace }}/ext_libs/vcpkg fetch --unshallow
      - name: Setup MSVC Developer Command Prompt
        if: ${{ startsWith(matrix.config.os, 'windows') }}
        uses: ilammy/msvc-dev-cmd@v1
      - uses: lukka/get-cmake@latest
      - run: echo "VCPKG_COMMIT=$(git rev-parse :ext_libs/vcpkg)" >> $GITHUB_ENV
        shell: bash
      - run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
      - uses: actions/cache@v3
        env:
          cache-name: vcpkg-cache
        with:
          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}/*
          key: ${{ matrix.config.os_name }}-build-${{ env.cache-name }}-${{ hashFiles('vcpkg.json') }}-${{ env.VCPKG_COMMIT }}
      - uses: lukka/run-vcpkg@v10
        with:
          vcpkgDirectory: '${{ github.workspace }}/ext_libs/vcpkg'
          vcpkgJsonGlob: "${{ github.workspace }}/ext_libs/vcpkg.json"
      - name: Configure
        run: >
          cd ext_libs;
          cmake --preset=${{ matrix.config.cmake_preset }}
      - name: Build
        run: |
          cd ext_libs
          cmake --build build --preset=${{ matrix.config.cmake_preset }} --config ${{ matrix.build.build_type }}
      - name: Copy binaries (windows)
        if: startsWith(matrix.config.os, 'windows') == true
        run: |
          mkdir ${{ env.BINARY_ARTIFACTS_BASE_PATH }}
          copy ${{ env.VW_BIN_SRC_PATH }}/${{ matrix.config.vw_bin_src }} ${{ env.BINARY_ARTIFACTS_BASE_PATH }}/${{ matrix.config.vw_bin_dest }}
      - name: Copy binaries (${{ matrix.config.os_name }})
        if: startsWith(matrix.config.os, 'windows') == false
        run: |
          mkdir -p ${{ env.BINARY_ARTIFACTS_BASE_PATH }}
          cp ${{ env.VW_BIN_SRC_PATH }}/${{ matrix.config.vw_bin_src }} ${{ env.BINARY_ARTIFACTS_BASE_PATH }}/${{ matrix.config.vw_bin_dest }}
      - name: Save VW Parser Binaries
        uses: actions/upload-artifact@v4
        with:
          name: vw-binaries-${{ matrix.config.os_name }}-${{ matrix.build.build_type }}
          path: ${{ env.BUILD_ARTIFACTS }}

  # combine artifacts of binary parser
  combine-vw-binaries:
    needs: build-binary-parser
    runs-on: ubuntu-latest
    steps:
      - name: Restore Binary Parser Binaries
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.BUILD_ARTIFACTS }}

      - name: Reorganize Binaries
        run: |
          mkdir -p ${{ env.BUILD_ARTIFACTS }}/vw-bin-flat/debug ${{ env.BUILD_ARTIFACTS }}/vw-bin-flat/release
          cp ${{ env.BUILD_ARTIFACTS }}/**/vw-bin/debug/**/* ${{ env.BUILD_ARTIFACTS }}/vw-bin-flat/debug
          cp ${{ env.BUILD_ARTIFACTS }}/**/vw-bin/release/**/* ${{ env.BUILD_ARTIFACTS }}/vw-bin-flat/release
          mv ${{ env.BUILD_ARTIFACTS }}/vw-bin-flat ${{ env.BUILD_ARTIFACTS }}/vw-bin

      - name: Save Combined VW Binaries
        uses: actions/upload-artifact@v4
        with:
          name: vw-binaries
          path: ${{ env.BUILD_ARTIFACTS }}


  # build the assemblies on ubuntu. later test the assemblies on all platforms
  build-assemblies:
    needs: combine-vw-binaries
    name: build-assemblies-${{ matrix.config.os_name }}-${{ matrix.build.build_type }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: "windows-latest", os_name: "windows-latest" }
          - { os: "ubuntu-latest", os_name: "ubuntu-latest" }
          - { os: "macos-13", os_name: "macos-latest" }
        build:
          - { build_type: "debug" }
          - { build_type: "release" }

    env:
      VW_BINARY_PATH: ${{github.workspace}}/artifacts/vw-bin/${{ matrix.build.build_type }}
      BINARY_ARTIFACTS_BASE_PATH: ${{github.workspace}}/artifacts/assembly

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.head_ref || github.ref }}
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.0.x

      - name: Restore Binary Parser Binaries
        uses: actions/download-artifact@v4
        with:
          name: vw-binaries
          path: ${{ env.BUILD_ARTIFACTS }}

      - name: Build Common
        run: dotnet build -c ${{ matrix.build.build_type }} Common/Common.csproj -p:CIVWBinParserPath=${{ env.VW_BINARY_PATH }}
      - name: Build OnlineTrainer
        run: dotnet build -c ${{ matrix.build.build_type }} OnlineTrainerExe/OnlineTrainerExe.csproj -p:CIVWBinParserPath=${{ env.VW_BINARY_PATH }}
      - name: Build Tests
        run: dotnet build -c ${{ matrix.build.build_type }} Tests/Tests.csproj -p:CIVWBinParserPath=${{ env.VW_BINARY_PATH }}

      - name: Publish Common
        run: dotnet publish --no-build -c ${{ matrix.build.build_type }} Common/Common.csproj -o ${{ env.BINARY_ARTIFACTS_BASE_PATH }}/Common
      - name: Publish OnlineTrainer
        run: dotnet publish --no-build -c ${{ matrix.build.build_type }} OnlineTrainerExe/OnlineTrainerExe.csproj -o ${{ env.BINARY_ARTIFACTS_BASE_PATH }}/OnlineTrainer
      - name: Publish Tests
        run: dotnet publish --no-build -c ${{ matrix.build.build_type }} Tests/Tests.csproj -o ${{ env.BINARY_ARTIFACTS_BASE_PATH }}/Tests

      - name: Save Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.config.os_name }}-${{ matrix.build.build_type }}
          path: ${{ env.BUILD_ARTIFACTS }}/assembly

  # pull the test assemblies and run the tests on all platforms
  unit-test:
    needs: build-assemblies
    name: unittest-${{ matrix.config.os_name }}-${{ matrix.build.build_type }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: "windows-latest", os_name: "windows-latest", vw_bin: "vw-win-x64.exe" }
          - { os: "ubuntu-latest", os_name: "ubuntu-latest", vw_bin: "vw-linux-x64" }
          - { os: "macos-13", os_name: "macos-latest", vw_bin: "vw-macos-x64" }
        build:
          - { build_type: "debug" }
          - { build_type: "release" }
    env:
      BUILD_ARTIFACTS_BASE_PATH: ${{github.workspace}}/artifacts
      TEST_ARTIFACTS_BASE_PATH: ${{github.workspace}}/artifacts/${{ matrix.build.build_type }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.head_ref || github.ref }}
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.0.x
      
      - name: Download Tests Binaries
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ matrix.config.os_name }}-${{ matrix.build.build_type }}
          path: ${{ env.BUILD_ARTIFACTS }}

      - name: Prepare VW binaries (${{ matrix.config.os_name }})
        if: startsWith(matrix.config.os, 'windows') == false
        run: |
          chmod +x ${{ env.BUILD_ARTIFACTS_BASE_PATH }}/Tests/vw-bin/${{ matrix.config.vw_bin }}
          echo "${{ env.BUILD_ARTIFACTS_BASE_PATH }}/Tests/vw-bin/${{ matrix.config.vw_bin }} set to executable"

      - name: Prepare Test binaries (${{ matrix.config.os_name }})
        if: startsWith(matrix.config.os, 'windows') == false
        run: |
          if [ -f "${{ env.BUILD_ARTIFACTS_BASE_PATH }}/Tests/TestExeApp" ]; then
            chmod +x ${{ env.BUILD_ARTIFACTS_BASE_PATH }}/Tests/TestExeApp
            echo "${{ env.BUILD_ARTIFACTS_BASE_PATH }}/Tests/TestExeApp set to executable"
          elif [ -f "${{ env.BUILD_ARTIFACTS_BASE_PATH }}/Tests/TestExeApp.exe" ]; then
            chmod +x ${{ env.BUILD_ARTIFACTS_BASE_PATH }}/Tests/TestExeApp.exe
            echo "${{ env.BUILD_ARTIFACTS_BASE_PATH }}/Tests/TestExeApp.exe set to executable"
          else
            echo "TestExeApp is missing"
            exit 1
          fi

      - name: Run Tests
        run: dotnet vstest ${{ env.BUILD_ARTIFACTS_BASE_PATH }}/Tests/Tests.dll /ResultsDirectory:${{ env.TEST_ARTIFACTS_BASE_PATH }}/testresults --settings:./test.runsettings --collect:"XPlat Code Coverage" --logger:"trx;LogFilePrefix=testresult"