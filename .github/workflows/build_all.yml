# GitHub Actions workflow for building, testing, and packaging learning-loop components
# This workflow is triggered on push to main or releases branches or pull requests
# It builds the binary parser, assemblies, runs unit tests, builds docker image, and packages nuget
# It also builds the example projects
# For more information on GitHub Actions, see https://docs.github.com/en/actions

# Note: future improvements may include:
#   - improving build times by cachine vw binaries
#   - running performance tests
#   - running integration tests

# TODO: VCPKG caching is not working as expected (there's always a cache miss), investigate and fix
name: Build All

on:
  push:
    branches:
      - main
      - 'releases/**'
  pull_request:
    branches:
      - '*'
      
env:
  # cache directory for vcpkg binaries
  # VCPKG_DEFAULT_BINARY_CACHE: ${{github.workspace}}/vcpkg_binary_cache
  # Base directory for build artifacts
  BUILD_ARTIFACTS: ${{github.workspace}}/artifacts
  DOTNET_VERSION: 8.0.x
  TARGET_FRAMEWORK: net8.0

concurrency:
  # Group jobs by workflow and branch/commit
  group: ${{ github.workflow }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  # build vw binary parser for all platforms and configurations
  # the binaries are used by the assemblies and tests across platforms
  # from a single assembly package
  build-rl-binaries:
    name: binary-parser-${{ matrix.build.build_type }}-${{ matrix.config.os_name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # Note: os is used to specify the runner OS, os_name is used to specify the
          #       os name in the matrix and for the build artifacts normilzing the 
          #       os name to be used in the build artifacts path
          - { os: "windows-latest", os_name: "windows-latest", vcpkg_target_triplet: "x64-windows-static", cmake_preset: "vcpkg-x64-windows-static", vw_bin_src: "vw.exe", vw_bin_dest: "vw-win-x64.exe", rlsim_bin_src: "rl_sim_cpp.out.exe", rlsim_bin_dest: "rl_sim-win-x64.exe" }
          - { os: "ubuntu-latest", os_name: "ubuntu-latest", vcpkg_target_triplet: "x64-linux", cmake_preset: "vcpkg-x64-linux-static", vw_bin_src: "vw", vw_bin_dest: "vw-linux-x64", rlsim_bin_src: "rl_sim_cpp.out", rlsim_bin_dest: "rl_sim-linux-x64" }
          - { os: "macos-13", os_name: "macos-latest", vcpkg_target_triplet: "x64-osx", cmake_preset: "vcpkg-x64-osx-static", vw_bin_src: "vw", vw_bin_dest: "vw-macos-x64", rlsim_bin_src: "rl_sim_cpp.out", rlsim_bin_dest: "rl_sim-macos-x64"  }
        build:
          - { build_type: "debug" }
          - { build_type: "release" }
    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.config.vcpkg_target_triplet }}
      VW_BIN_SRC_PATH: ext_libs/build/reinforcement_learning/external_parser
      VW_BINARY_ARTIFACTS_BASE_PATH: ${{github.workspace}}/artifacts/vw-bin/${{ matrix.build.build_type }}/${{ matrix.config.os_name }}
      RLSIM_BIN_SRC_PATH: ext_libs/build/reinforcement_learning/examples/rl_sim_cpp
      RLSIM_BINARY_ARTIFACTS_BASE_PATH: ${{github.workspace}}/artifacts/rl_sim/${{ matrix.build.build_type }}/${{ matrix.config.os_name }}

    steps:
      # checkout the code with submodules for vcpkg, and reinforcment_learning
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: git -C ${{ github.workspace }}/ext_libs/reinforcement_learning/ext_libs/vcpkg fetch --unshallow
      - name: Setup MSVC Developer Command Prompt
        if: ${{ startsWith(matrix.config.os, 'windows') }}
        uses: ilammy/msvc-dev-cmd@v1
      - uses: lukka/get-cmake@latest
      # - run: echo "VCPKG_COMMIT=$(git rev-parse :ext_libs/reinforcement_learning/ext_libs/vcpkg)" >> $GITHUB_ENV
      #  shell: bash
      #- run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
      # - uses: actions/cache@v3
      #   env:
      #     cache-name: vcpkg-cache
      #   with:
      #     path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}/*
      #     key: ${{ matrix.config.os_name }}-${{ matrix.build.build_type }}-build-${{ env.cache-name }}-${{ hashFiles('**/vcpkg.json') }}-${{ env.VCPKG_COMMIT }}
      - uses: lukka/run-vcpkg@v10
        with:
          vcpkgDirectory: '${{ github.workspace }}/ext_libs/reinforcement_learning/ext_libs/vcpkg'
          vcpkgJsonGlob: "${{ github.workspace }}/ext_libs/reinforcement_learning/vcpkg.json"
          vcpkgCommitId: 'HEAD'
          doNotUpdateVcpkg: true
      # build the binary parser only - the presets are convenient for consistent build settings for local and CI builds
      - name: Configure
        run: >
          cd ext_libs;
          cmake --preset=${{ matrix.config.cmake_preset }}
      - name: Build
        run: |
          cd ext_libs
          cmake --build build --preset=${{ matrix.config.cmake_preset }} --config ${{ matrix.build.build_type }}
      # prepare binaries and package
      - name: Copy binaries (windows)
        if: startsWith(matrix.config.os, 'windows') == true
        run: |
          mkdir ${{ env.VW_BINARY_ARTIFACTS_BASE_PATH }}
          copy ${{ env.VW_BIN_SRC_PATH }}/${{ matrix.config.vw_bin_src }} ${{ env.VW_BINARY_ARTIFACTS_BASE_PATH }}/${{ matrix.config.vw_bin_dest }}
          mkdir ${{ env.RLSIM_BINARY_ARTIFACTS_BASE_PATH }}
          copy ${{ env.RLSIM_BIN_SRC_PATH }}/${{ matrix.config.rlsim_bin_src }} ${{ env.RLSIM_BINARY_ARTIFACTS_BASE_PATH }}/${{ matrix.config.rlsim_bin_dest }}
      - name: Copy binaries (${{ matrix.config.os_name }})
        if: startsWith(matrix.config.os, 'windows') == false
        run: |
          mkdir -p ${{ env.VW_BINARY_ARTIFACTS_BASE_PATH }}
          cp ${{ env.VW_BIN_SRC_PATH }}/${{ matrix.config.vw_bin_src }} ${{ env.VW_BINARY_ARTIFACTS_BASE_PATH }}/${{ matrix.config.vw_bin_dest }}
          mkdir -p ${{ env.RLSIM_BINARY_ARTIFACTS_BASE_PATH }}
          cp ${{ env.RLSIM_BIN_SRC_PATH }}/${{ matrix.config.rlsim_bin_src }} ${{ env.RLSIM_BINARY_ARTIFACTS_BASE_PATH }}/${{ matrix.config.rlsim_bin_dest }}
      - name: Save VW Parser Binaries
        uses: actions/upload-artifact@v4
        with:
          name: rl-binaries-${{ matrix.config.os_name }}-${{ matrix.build.build_type }}
          path: ${{ env.BUILD_ARTIFACTS }}

  # build debug and release assemblies on linux used by all supported platforms.
  # this job generates a single debug and release package.
  build-assemblies:
    needs: build-rl-binaries
    name: build-assemblies-${{ matrix.build.build_type }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build:
          - { build_type: "debug" }
          - { build_type: "release" }
    env:
      # vw binary pareser packages are organized by build type and os name
      VW_ARTIFACTS_PATH: ${{github.workspace}}/artifacts/vw-bin/${{ matrix.build.build_type }}
      # locally vw binaries are re-orgnized for the build.  all binaries
      # are flattened in the build artifacts under vw-bin
      VW_BINARY_PATH: ${{github.workspace}}/vw-bin
      # rlsim binaries are organized by build type and os name
      RLSIM_ARTIFACTS_PATH: ${{github.workspace}}/artifacts/rl_sim/${{ matrix.build.build_type }}
      # locally vw binaries are re-orgnized for the build.  all binaries
      # are flattened in the build artifacts under assembly/rl_sim and will become part of build-artifacts-*
      RLSIM_BINARY_PATH: ${{github.workspace}}/assembly/rl_sim
      # base directory for the assemebly artifacts
      BINARY_ARTIFACTS_BASE_PATH: ${{github.workspace}}/artifacts/assembly
      NUGET_ARTIFACTS_PATH: ${{github.workspace}}/artifacts/nuget

    steps:
      # there's no need to check submodules since they are not needed in this job
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.head_ref || github.ref }}
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore Binary Parser Binaries
        uses: actions/download-artifact@v4
        with:
          pattern: rl-binaries-*
          merge-multiple: true
          path: ${{ env.BUILD_ARTIFACTS }}

      - name: Reorganize Binaries
        run: |
          mkdir -p ${{ env.VW_BINARY_PATH }}
          cp ${{ env.VW_ARTIFACTS_PATH }}/**/* ${{ env.VW_BINARY_PATH }}
          mkdir -p ${{ env.RLSIM_BINARY_PATH }}
          cp ${{ env.RLSIM_ARTIFACTS_PATH }}/**/* ${{ env.RLSIM_BINARY_PATH }}

      - name: Build Common
        run: dotnet build -c ${{ matrix.build.build_type }} Common/Common.csproj -p:CIVWBinParserPath=${{ env.VW_BINARY_PATH }}
      - name: Publish Common
        run: dotnet publish --no-build -c ${{ matrix.build.build_type }} Common/Common.csproj -o ${{ env.BINARY_ARTIFACTS_BASE_PATH }}/Common
      - name: Pack Nuget
        run: dotnet pack Common/Common.csproj --no-build -c ${{ matrix.build.build_type }} -p:PackageVersion=1.0.0 -p:PackageSourcePath=${{ env.BUILD_ARTIFACTS }}/Common -p:TargetFramework=${{ env.TARGET_FRAMEWORK }} -o ${{ env.NUGET_ARTIFACTS_PATH }} -v d

      - name: Build OnlineTrainer
        run: dotnet build -c ${{ matrix.build.build_type }} OnlineTrainerExe/OnlineTrainerExe.csproj -p:CIVWBinParserPath=${{ env.VW_BINARY_PATH }}
      - name: Publish OnlineTrainer
        run: dotnet publish --no-build -c ${{ matrix.build.build_type }} OnlineTrainerExe/OnlineTrainerExe.csproj -o ${{ env.BINARY_ARTIFACTS_BASE_PATH }}/OnlineTrainer

      - name: Build Tests
        run: dotnet build -c ${{ matrix.build.build_type }} Tests/Tests.csproj -p:CIVWBinParserPath=${{ env.VW_BINARY_PATH }}
      - name: Publish Tests
        run: dotnet publish --no-build -c ${{ matrix.build.build_type }} Tests/Tests.csproj -o ${{ env.BINARY_ARTIFACTS_BASE_PATH }}/Tests

      - name: List Assembly Artifacts
        run: ls -lR ${{ env.BUILD_ARTIFACTS }}

      - name: Save Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.build.build_type }}
          path: ${{ env.BINARY_ARTIFACTS_BASE_PATH }}

      - name: Save Nuget Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-artifacts-${{ matrix.build.build_type }}
          path: ${{ env.NUGET_ARTIFACTS_PATH }}

  # pull the test assemblies and run the tests on all platforms for all confirgurations
  unit-test:
    needs: build-assemblies
    name: unittest-${{ matrix.config.os_name }}-${{ matrix.build.build_type }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: "windows-latest", os_name: "windows-latest", vw_bin: "vw-win-x64.exe" }
          - { os: "ubuntu-latest", os_name: "ubuntu-latest", vw_bin: "vw-linux-x64" }
          - { os: "macos-13", os_name: "macos-latest", vw_bin: "vw-macos-x64" }
        build:
          - { build_type: "debug" }
          - { build_type: "release" }
    env:
      TEST_ARTIFACTS_BASE_PATH: ${{github.workspace}}/artifacts/${{ matrix.build.build_type }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.head_ref || github.ref }}
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Download Tests Binaries
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ matrix.build.build_type }}
          path: ${{ env.BUILD_ARTIFACTS }}

      - name: Prepare VW binaries (${{ matrix.config.os_name }})
        if: startsWith(matrix.config.os, 'windows') == false
        run: |
          chmod +x ${{ env.BUILD_ARTIFACTS }}/Tests/vw-bin/${{ matrix.config.vw_bin }}
          echo "${{ env.BUILD_ARTIFACTS }}/Tests/vw-bin/${{ matrix.config.vw_bin }} set to executable"

      - name: Run Tests
        run: dotnet vstest ${{ env.BUILD_ARTIFACTS }}/Tests/Tests.dll /ResultsDirectory:${{ env.TEST_ARTIFACTS_BASE_PATH }}/testresults --settings:./test.runsettings --collect:"XPlat Code Coverage" --logger:"trx;LogFilePrefix=testresult"

      - name: Save Test Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-${{ matrix.config.os_name }}-${{ matrix.build.build_type }}
          path: ${{ env.TEST_ARTIFACTS_BASE_PATH }}/testresults

  # build and package the docker image (tar'd) built for ubuntu-latest
  docker-image:
    needs: build-assemblies
    name: docker-image-ubuntu-latest-release
    runs-on: ubuntu-latest
    env:
      DOCKER_ARTIFACTS_PATH: ${{github.workspace}}/artifacts/docker
     
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.head_ref || github.ref }}
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Download Binaries
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-release
          path: ${{ env.BUILD_ARTIFACTS }}

      - run: mkdir -p ${{ env.DOCKER_ARTIFACTS_PATH }}

      - name: Build Docker Image
        run: docker build -t learning-loop:latest --build-arg TRAINER_SRC_PATH=artifacts/OnlineTrainer RLSIM_SRC_PATH=artifacts/rl_sim -f ./OnlineTrainerExe/Dockerfile .

      - name: Docker Image tar
        run: docker save learning-loop:latest -o ${{ env.DOCKER_ARTIFACTS_PATH }}/learning-loop-ubuntu-latest.tar

      # todo: remove the gzip step
      - name: GZip tar
        run: gzip -9 ${{ env.DOCKER_ARTIFACTS_PATH }}/learning-loop-ubuntu-latest.tar

      - name: Save Docker Zipped Iamge
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-ubuntu-latest
          path: ${{ env.DOCKER_ARTIFACTS_PATH }}/learning-loop-ubuntu-latest.tar.gz

  # build the example projects for all platforms and configurations
  build-example:
    needs: build-assemblies
    name: build-example-${{ matrix.build.build_type }}-${{ matrix.config.os_name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: "windows-latest", os_name: "windows-latest" }
          - { os: "ubuntu-latest", os_name: "ubuntu-latest" }
          - { os: "macos-13", os_name: "macos-latest" }
        build:
          - { build_type: "debug" }
          - { build_type: "release" }

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.head_ref || github.ref }}

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Download Nuget
        uses: actions/download-artifact@v4
        with:
          name: nuget-artifacts-${{ matrix.build.build_type }}
          path: ${{ env.BUILD_ARTIFACTS }}

      - name: List Downloaded Nuget Packages
        run: ls -l ${{ env.BUILD_ARTIFACTS }}

      - name: Build ConsoleJoiner Example
        run: dotnet build -c ${{ matrix.build.build_type }} examples/ConsoleJoiner/ConsoleJoiner.csproj
     
  # analyze the csharp trainer code using codeql
  analyze-trainer-csharp:
    needs: build-rl-binaries
    name: CSharp Trainer Analysis
    runs-on: windows-latest
    permissions:
      # required for all workflows
      security-events: write
      # required to fetch internal or private CodeQL packs
      packages: read
    env:
      # vw binary pareser packages are organized by build type and os name
      VW_ARTIFACTS_PATH: ${{github.workspace}}/artifacts/vw-bin/debug
      # locally vw binaries are re-orgnized for the build.  all binaries
      # are flattened in the build artifacts under vw-bin
      VW_BINARY_PATH: ${{github.workspace}}/vw-bin

    steps:
      # there's no need to check submodules since they are not needed in this job
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.head_ref || github.ref || github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore Binary Parser Binaries
        uses: actions/download-artifact@v4
        with:
          pattern: rl-binaries-*
          merge-multiple: true
          path: ${{ env.BUILD_ARTIFACTS }}

      - name: Reorganize VW Binaries
        run: |
          mkdir -p ${{ env.VW_BINARY_PATH }}
          cp ${{ env.VW_ARTIFACTS_PATH }}/**/* ${{ env.VW_BINARY_PATH }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
          config-file: ./.github/codeql/codeql-config.yml

      - name: Build Common
        run: dotnet build -c debug Common/Common.csproj -p:CIVWBinParserPath=${{ env.VW_BINARY_PATH }}

      - name: Build OnlineTrainer
        run: dotnet build -c debug OnlineTrainerExe/OnlineTrainerExe.csproj -p:CIVWBinParserPath=${{ env.VW_BINARY_PATH }}

      - name: Build Tests
        run: dotnet build -c debug Tests/Tests.csproj -p:CIVWBinParserPath=${{ env.VW_BINARY_PATH }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: csharp

  # analyze the csharp example code using codeql
  analyze-examples-csharp:
    needs: build-assemblies
    name: CSharp Examples Analysis
    runs-on: windows-latest
    permissions:
      # required for all workflows
      security-events: write
      # required to fetch internal or private CodeQL packs
      packages: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.head_ref || github.ref || github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Download Nuget
        uses: actions/download-artifact@v4
        with:
          name: nuget-artifacts-debug
          path: ${{ env.BUILD_ARTIFACTS }}

      - name: List Downloaded Nuget Packages
        run: ls -l ${{ env.BUILD_ARTIFACTS }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
          config-file: ./.github/codeql/codeql-config.yml

      - name: Build ConsoleJoiner Example
        run: dotnet build -c debug examples/ConsoleJoiner/ConsoleJoiner.csproj

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: csharp
