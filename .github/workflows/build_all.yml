name: Build All

on:
  push:
    branches:
      - master
      - 'releases/**'
  pull_request:
    branches:
      - '*'
  # NOTE: allow manual triggering of the workflow for testing (remove before making public)
  workflow_dispatch:

env:
  VCPKG_DEFAULT_BINARY_CACHE: ${{github.workspace}}/vcpkg_binary_cache
  BUILD_ARTIFACTS: ${{github.workspace}}/artifacts

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  build-binaries:
    name: build-binaries-${{ matrix.build.build_type }}-${{ matrix.config.os_name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: "windows-latest", os_name: "windows-latest", vcpkg_target_triplet: "x64-windows-static", cmake_preset: "vcpkg-x64-windows-static" }
          - { os: "ubuntu-latest", os_name: "ubuntu-latest", vcpkg_target_triplet: "x64-linux", cmake_preset: "vcpkg-x64-linux-static" }
          - { os: "macos-13", os_name: "macos-latest", vcpkg_target_triplet: "x64-osx", cmake_preset: "vcpkg-x64-osx-static" }
        build:
          - { build_type: "debug" }
          - { build_type: "release" }
    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.config.vcpkg_target_triplet }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - run: git -C ${{ github.workspace }}/ext_libs/vcpkg fetch --unshallow
      - name: Setup MSVC Developer Command Prompt
        if: ${{ startsWith(matrix.config.os, 'windows') }}
        uses: ilammy/msvc-dev-cmd@v1
      - uses: lukka/get-cmake@latest
      - run: echo "VCPKG_COMMIT=$(git rev-parse :ext_libs/vcpkg)" >> $GITHUB_ENV
        shell: bash
      - run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
      - uses: actions/cache@v3
        env:
          cache-name: vcpkg-cache
        with:
          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}/*
          key: ${{ matrix.config.os_name }}-build-${{ env.cache-name }}-${{ hashFiles('vcpkg.json') }}-${{ env.VCPKG_COMMIT }}
      - uses: lukka/run-vcpkg@v10
        with:
          vcpkgDirectory: '${{ github.workspace }}/ext_libs/vcpkg'
          vcpkgJsonGlob: "${{ github.workspace }}/ext_libs/vcpkg.json"

      - name: Build Common
        run: dotnet build -c ${{ matrix.build.build_type }} Common/Common.csproj
      - name: Publish Common
        run: dotnet publish --no-build -c ${{ matrix.build.build_type }} Common/Common.csproj -o ${{ env.BUILD_ARTIFACTS }}/Common

      - name: Build OnlineTrainer
        run: dotnet build -c ${{ matrix.build.build_type }} OnlineTrainerExe/OnlineTrainerExe.csproj
      - name: Publish OnlineTrainer
        run: dotnet publish --no-build -c ${{ matrix.build.build_type }} OnlineTrainerExe/OnlineTrainerExe.csproj -o ${{ env.BUILD_ARTIFACTS }}/OnlineTrainer

      - name: Build Tests
        run: dotnet build -c ${{ matrix.build.build_type }} Tests/Tests.csproj
      - name: Publish Tests
        run: dotnet publish --no-build -c ${{ matrix.build.build_type }} Tests/Tests.csproj -o ${{ env.BUILD_ARTIFACTS }}/Tests

      - name: Save Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.config.os_name }}-${{ matrix.build.build_type }}
          path: ${{ env.BUILD_ARTIFACTS }}

  # pull the test assemblies and run the tests on all platforms
  unit-test:
    needs: build-binaries
    name: unittest-${{ matrix.config.os_name }}-${{ matrix.build.build_type }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: "windows-latest", os_name: "windows-latest", vw_bin: "vw-win-x64.exe" }
          - { os: "ubuntu-latest", os_name: "ubuntu-latest", vw_bin: "vw-linux-x64" }
          - { os: "macos-13", os_name: "macos-latest", vw_bin: "vw-macos-x64" }
        build:
          - { build_type: "debug" }
          - { build_type: "release" }
    env:
      BUILD_ARTIFACTS_BASE_PATH: ${{github.workspace}}/artifacts
      TEST_ARTIFACTS_BASE_PATH: ${{github.workspace}}/artifacts/${{ matrix.build.build_type }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.head_ref || github.ref }}
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      
      - name: Download Tests Binaries
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ matrix.config.os_name }}-${{ matrix.build.build_type }}
          path: ${{ env.BUILD_ARTIFACTS }}

      - name: Prepare VW binaries (${{ matrix.config.os_name }})
        if: startsWith(matrix.config.os, 'windows') == false
        run: |
          chmod +x ${{ env.BUILD_ARTIFACTS_BASE_PATH }}/Tests/vw-bin/${{ matrix.config.vw_bin }}
          echo "${{ env.BUILD_ARTIFACTS_BASE_PATH }}/Tests/vw-bin/${{ matrix.config.vw_bin }} set to executable"

      - name: Prepare Test binaries (${{ matrix.config.os_name }})
        if: startsWith(matrix.config.os, 'windows') == false
        run: |
          if [ -f "${{ env.BUILD_ARTIFACTS_BASE_PATH }}/Tests/TestExeApp" ]; then
            chmod +x ${{ env.BUILD_ARTIFACTS_BASE_PATH }}/Tests/TestExeApp
            echo "${{ env.BUILD_ARTIFACTS_BASE_PATH }}/Tests/TestExeApp set to executable"
          elif [ -f "${{ env.BUILD_ARTIFACTS_BASE_PATH }}/Tests/TestExeApp.exe" ]; then
            chmod +x ${{ env.BUILD_ARTIFACTS_BASE_PATH }}/Tests/TestExeApp.exe
            echo "${{ env.BUILD_ARTIFACTS_BASE_PATH }}/Tests/TestExeApp.exe set to executable"
          else
            echo "TestExeApp is missing"
            exit 1
          fi

      - name: Run Tests
        run: dotnet vstest ${{ env.BUILD_ARTIFACTS_BASE_PATH }}/Tests/Tests.dll /ResultsDirectory:${{ env.TEST_ARTIFACTS_BASE_PATH }}/testresults --settings:./test.single-threaded.runsettings --collect:"XPlat Code Coverage" --logger:"trx;LogFilePrefix=testresult"

      - name: Save Test Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-${{ matrix.config.os_name }}-${{ matrix.build.build_type }}
          path: ${{ env.TEST_ARTIFACTS_BASE_PATH }}/testresults

  docker-image:
    needs: build-binaries
    name: docker-image-ubuntu-latest-release
    runs-on: ubuntu-latest
    env:
      DOCKER_ARTIFACTS_PATH: ${{github.workspace}}/artifacts/docker
     
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.head_ref || github.ref }}
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Download Binaries
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-ubuntu-latest-release
          path: ${{ env.BUILD_ARTIFACTS }}

      - run: mkdir -p ${{ env.DOCKER_ARTIFACTS_PATH }}

      - name: Build Docker Image
        run: docker build -t learning-loop:latest --build-arg SRC_PATH=artifacts/OnlineTrainer -f ./OnlineTrainerExe/Dockerfile .

      - name: Docker Image tar
        run: docker save learning-loop:latest -o ${{ env.DOCKER_ARTIFACTS_PATH }}/learning-loop-ubuntu-latest.tar

      - name: GZip tar
        run: gzip -9 ${{ env.DOCKER_ARTIFACTS_PATH }}/learning-loop-ubuntu-latest.tar

      - name: Save Docker Zipped Iamge
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-ubuntu-latest
          path: ${{ env.DOCKER_ARTIFACTS_PATH }}/learning-loop-ubuntu-latest.tar.gz

  nuget-package:
    needs: build-binaries
    name: nuget-${{ matrix.config.os_name }}-${{ matrix.build.build_type }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
      config:
        - { os: "windows-latest", os_name: "windows-latest" }
        - { os: "ubuntu-latest", os_name: "ubuntu-latest" }
        - { os: "macos-13", os_name: "macos-latest" }
      build:
        - { build_type: "debug" }
        - { build_type: "release" }
    env:
      NUGET_ARTIFACTS_PATH: ${{github.workspace}}/artifacts/nuget

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.head_ref || github.ref }}
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      -name: Setup Nuget CLI
        run: |
          if [[ "${{ matrix.config.os }}" == "windows-latest" ]]; then
            choco install nuget.commandline -y
          else
            wget https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -O nuget.exe
          fi

      - name: Install Mono (Linux and Mac Only)
        if: startsWith(matrix.config.os, 'windows-latest') == false
        run: |
          if [ "${{ matrix.config.os }}" == "ubunutu-latest" ]; then
            sudo apt-get update
            sudo apt-get install -y mono-complete
          else
            brew update
            brew install mono
          fi

      - name: Download Tests Binaries
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ matrix.config.os_name }}-${{ matrix.build.build_type }}
          path: ${{ env.BUILD_ARTIFACTS }}

      - name: Pack Nuget
        run: |
          if [ "${{ matrix.config.os }}" == "windows-latest" ]; then
            nuget.exe pack Common\Microsoft.DecisionService.Common.nuspec -Properties "PackageSourcePath=..\artifacts\common;version=1.0.0;targetframework=net8.0" -OutputDirectory ${{ env.NUGET_ARTIFACTS_PATH }}
          else
            mono nuget.exe pack Common\Microsoft.DecisionService.Common.nuspec -Properties "PackageSourcePath=..\artifacts\common;version=1.0.0;targetframework=net8.0" -OutputDirectory ${{ env.NUGET_ARTIFACTS_PATH }}
          fi

      - name: Save Nuget Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-artifacts-${{ matrix.config.os_name }}-${{ matrix.build.build_type }}
