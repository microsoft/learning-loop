# GitHub Actions workflow for building, testing, and packaging learning-loop components
# This workflow is triggered on push to main or releases branches or pull requests
# It builds the binary parser, assemblies, runs unit tests, builds docker image, and packages nuget
# It also builds the example projects
# For more information on GitHub Actions, see https://docs.github.com/en/actions

# Note: future improvements may include:
#   - improving build times by cachine vw binaries
#   - running performance tests
#   - running integration tests

name: Build All

on:
  push:
    branches:
      - main
      - 'releases/**'
  pull_request:
    branches:
      - '*'
  # TODO: remove manual before merging to main
  workflow_dispatch:

env:
  # Base directory for build artifacts
  BUILD_ARTIFACTS: ${{github.workspace}}/src/artifacts
  DOTNET_VERSION: 8.0.x
  TARGET_FRAMEWORK: net8.0
  DELAY_SIGN_PROPS_PATH: ${{github.workspace}}/src/.build/microsoft/DelaySign.props
  MAJOR_VERSION: 1
  MINOR_VERSION: 0

concurrency:
  # Group jobs by workflow and branch/commit
  group: ${{ github.workflow }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  generate_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.VERSION }}
      info_version: ${{ steps.set_version.outputs.INFORMATIONAL_VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Version Number
        id: set_version
        run: |
          BUILD_NUMBER=$(date +%y%m)
          BRANCH_NAME=${GITHUB_REF##*/}
          REVISION=${GITHUB_RUN_NUMBER}
          VERSION="$MAJOR_VERSION.$MINOR_VERSION.$BUILD_NUMBER.$REVISION"

          if [ "$BRANCH_NAME" == "main" ]; then
            INFORMATIONAL_VERSION="${VERSION}"
          else
            INFORMATIONAL_VERSION="${VERSION}-${BRANCH_NAME}"
          fi
          
          echo "VERSION=$VERSION"
          echo "INFORMATIONAL_VERSION=$INFORMATIONAL_VERSION"
          echo "::set-output name=VERSION::$VERSION"
          echo "::set-output name=INFORMATIONAL_VERSION::$INFORMATIONAL_VERSION"

  # build vw binary parser for all platforms and configurations
  # the binaries are used by the assemblies and tests across platforms
  # from a single assembly package
  build-rl-binaries:
    needs: generate_version
    name: binary-parser-${{ matrix.config.os_name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # Note: os is used to specify the runner OS, os_name is used to specify the
          #       os name in the matrix and for the build artifacts normilzing the 
          #       os name to be used in the build artifacts path
          - { os: "windows-latest", os_name: "windows-latest", vcpkg_target_triplet: "x64-windows-static", vw_bin_src: "vw.exe", vw_bin_dest: "vw-win-x64.exe", rlsim_bin_src: "rl_sim_cpp.out.exe", rlsim_bin_dest: "rl_sim-win-x64.exe" }
          - { os: "ubuntu-latest", os_name: "ubuntu-latest", vcpkg_target_triplet: "x64-linux", vw_bin_src: "vw", vw_bin_dest: "vw-linux-x64", rlsim_bin_src: "rl_sim_cpp.out", rlsim_bin_dest: "rl_sim-linux-x64" }
          - { os: "macos-13", os_name: "macos-latest", vcpkg_target_triplet: "x64-osx", vw_bin_src: "vw", vw_bin_dest: "vw-macos-x64", rlsim_bin_src: "rl_sim_cpp.out", rlsim_bin_dest: "rl_sim-macos-x64"  }
    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_RL_TOOLS_INSTALL: ${{ github.workspace }}/vcpkg/installed/${{ matrix.config.vcpkg_target_triplet }}/tools/reinforcement-learning
      VW_BINARY_ARTIFACTS_BASE_PATH: ${{github.workspace}}/src/artifacts/vw-bin/${{ matrix.config.os_name }}
      RLSIM_BINARY_ARTIFACTS_BASE_PATH: ${{github.workspace}}/src/artifacts/rl-sim/${{ matrix.config.os_name }}

    steps:
      - uses: actions/checkout@v4

      - name: cache vcpkg
        id: vcpkg-cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            ${{ github.workspace }}/vcpkg_installed
          key: vcpkg-${{ matrix.config.os_name }}-${{ hashFiles('ports/**/portfile.cmake') }}-${{ hashFiles('ports/**/vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ matrix.config.os_name }}-

      - name: Install vcpkg (windows)
        if: startsWith(matrix.config.os, 'windows') == true && steps.vcpkg-cache.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          ${{ env.VCPKG_ROOT }}/bootstrap-vcpkg.bat
          
      - name: Install vcpkg (linux/mac)
        if: startsWith(matrix.config.os, 'windows') == false && steps.vcpkg-cache.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          ${{ env.VCPKG_ROOT }}/bootstrap-vcpkg.sh

      - name: Install RL port
        run: |
          ${{ env.VCPKG_ROOT }}/vcpkg install reinforcement-learning[azure-auth,external-parser] --overlay-ports=${{ github.workspace }}/ports/reinforcement-learning --triplet=${{ matrix.config.vcpkg_target_triplet }}

      # prepare binaries and package
      - name: Copy binaries (windows)
        if: startsWith(matrix.config.os, 'windows') == true
        run: |
          mkdir ${{ env.VW_BINARY_ARTIFACTS_BASE_PATH }}
          copy ${{ env.VCPKG_RL_TOOLS_INSTALL }}/${{ matrix.config.vw_bin_src }} ${{ env.VW_BINARY_ARTIFACTS_BASE_PATH }}/${{ matrix.config.vw_bin_dest }}
          mkdir ${{ env.RLSIM_BINARY_ARTIFACTS_BASE_PATH }}
          copy ${{ env.VCPKG_RL_TOOLS_INSTALL }}/${{ matrix.config.rlsim_bin_src }} ${{ env.RLSIM_BINARY_ARTIFACTS_BASE_PATH }}/${{ matrix.config.rlsim_bin_dest }}

      - name: Copy binaries (${{ matrix.config.os_name }})
        if: startsWith(matrix.config.os, 'windows') == false
        run: |
          mkdir -p ${{ env.VW_BINARY_ARTIFACTS_BASE_PATH }}
          cp ${{ env.VCPKG_RL_TOOLS_INSTALL }}/${{ matrix.config.vw_bin_src }} ${{ env.VW_BINARY_ARTIFACTS_BASE_PATH }}/${{ matrix.config.vw_bin_dest }}
          mkdir -p ${{ env.RLSIM_BINARY_ARTIFACTS_BASE_PATH }}
          cp ${{ env.VCPKG_RL_TOOLS_INSTALL }}/${{ matrix.config.rlsim_bin_src }} ${{ env.RLSIM_BINARY_ARTIFACTS_BASE_PATH }}/${{ matrix.config.rlsim_bin_dest }}

      - name: Save VW Parser Binaries
        uses: actions/upload-artifact@v4
        with:
          name: rl-binaries-${{ matrix.config.os_name }}
          path: ${{ env.BUILD_ARTIFACTS }}

  # build debug and release assemblies on linux used by all supported platforms.
  # this job generates a single debug and release package.
  build-assemblies:
    needs:
      - generate_version
      - build-rl-binaries
    name: build-assemblies-${{ matrix.build.build_type }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build:
          - { build_type: "debug" }
          - { build_type: "release" }
    env:
      VW_BINARY_PATH: ${{github.workspace}}/src/artifacts/vw-bin
      RLSIM_BINARY_PATH: ${{github.workspace}}/src/artifacts/rl-sim
      BINARY_ARTIFACTS_BASE_PATH: ${{github.workspace}}/src/artifacts/assembly
      NUGET_ARTIFACTS_PATH: ${{github.workspace}}/src/artifacts/nuget
      VERSION: ${{ needs.generate_version.outputs.version }}
      INFO_VERSION: ${{ needs.generate_version.outputs.info_version }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.head_ref || github.ref }}
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore Binary Parser Binaries
        uses: actions/download-artifact@v4
        with:
          pattern: rl-binaries-*
          merge-multiple: true
          path: ${{ env.BUILD_ARTIFACTS }}

      - name: Reoganize Artifacts
        run: |
          mv ${{ env.VW_BINARY_PATH }}/*/* ${{ env.VW_BINARY_PATH }}
          find ${{ env.VW_BINARY_PATH }} -mindepth 1 -type d -exec rm -rf {} +
          mv ${{ env.RLSIM_BINARY_PATH }}/*/* ${{ env.RLSIM_BINARY_PATH }}
          find ${{ env.RLSIM_BINARY_PATH }} -mindepth 1 -type d -exec rm -rf {} +

      - name: List Restored Artifacts
        run: ls -lR ${{ env.BUILD_ARTIFACTS }}

      - name: Build Common
        run: dotnet build -c ${{ matrix.build.build_type }} src/Common/Common.csproj -p:CIVWBinParserPath=${{ env.VW_BINARY_PATH }} -p:PackagingIntegration=${{ env.DELAY_SIGN_PROPS_PATH }} -p:AssemblyVersion=${{ env.VERSION }} -p:FileVersion=${{ env.VERSION }} -p:InformationalVersion=${{ env.INFO_VERSION }}
      - name: Publish Common
        run: dotnet publish --no-build -c ${{ matrix.build.build_type }} src/Common/Common.csproj -o ${{ env.BINARY_ARTIFACTS_BASE_PATH }}/Common
      - name: Pack Nuget
        run: dotnet pack src/Common/Common.csproj --no-build -c ${{ matrix.build.build_type }} -p:PackageVersion=${{ env.VERSION }} -p:PackageSourcePath=${{ env.BINARY_ARTIFACTS_BASE_PATH }}/Common -p:TargetFramework=${{ env.TARGET_FRAMEWORK }} -o ${{ env.NUGET_ARTIFACTS_PATH }}

      - name: Build OnlineTrainer
        run: dotnet build -c ${{ matrix.build.build_type }} src/OnlineTrainerExe/OnlineTrainerExe.csproj -p:CIVWBinParserPath=${{ env.VW_BINARY_PATH }} -p:PackagingIntegration=${{ env.DELAY_SIGN_PROPS_PATH }} -p:AssemblyVersion=${{ env.VERSION }} -p:FileVersion=${{ env.VERSION }} -p:InformationalVersion=${{ env.INFO_VERSION }}
      - name: Publish OnlineTrainer
        run: dotnet publish --no-build -c ${{ matrix.build.build_type }} src/OnlineTrainerExe/OnlineTrainerExe.csproj -o ${{ env.BINARY_ARTIFACTS_BASE_PATH }}/OnlineTrainer

      - name: Build Tests
        run: dotnet build -c ${{ matrix.build.build_type }} src/Tests/Tests.csproj -p:CIVWBinParserPath=${{ env.VW_BINARY_PATH }} -p:PackagingIntegration=${{ env.DELAY_SIGN_PROPS_PATH }}
      - name: Publish Tests
        run: dotnet publish --no-build -c ${{ matrix.build.build_type }} src/Tests/Tests.csproj -o ${{ env.BINARY_ARTIFACTS_BASE_PATH }}/Tests

      - name: List All Artifacts
        run: ls -lR ${{ env.BUILD_ARTIFACTS }}

      - name: Save Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.build.build_type }}
          path: ${{ env.BINARY_ARTIFACTS_BASE_PATH }}

      - name: Save Nuget Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-artifacts-${{ matrix.build.build_type }}
          path: ${{ env.NUGET_ARTIFACTS_PATH }}

  # pull the test assemblies and run the tests on all platforms for all confirgurations
  unit-test:
    needs: build-assemblies
    name: unittest-${{ matrix.config.os_name }}-${{ matrix.build.build_type }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: "windows-latest", os_name: "windows-latest", vw_bin: "vw-win-x64.exe" }
          - { os: "ubuntu-latest", os_name: "ubuntu-latest", vw_bin: "vw-linux-x64" }
          - { os: "macos-13", os_name: "macos-latest", vw_bin: "vw-macos-x64" }
        build:
          - { build_type: "debug" }
          - { build_type: "release" }
    env:
      TEST_ARTIFACTS_BASE_PATH: ${{github.workspace}}/src/artifacts/${{ matrix.build.build_type }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.head_ref || github.ref }}
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Download Tests Binaries
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ matrix.build.build_type }}
          path: ${{ env.BUILD_ARTIFACTS }}

      - name: Prepare VW binaries (${{ matrix.config.os_name }})
        if: startsWith(matrix.config.os, 'windows') == false
        run: |
          chmod +x ${{ env.BUILD_ARTIFACTS }}/Tests/vw-bin/${{ matrix.config.vw_bin }}
          echo "${{ env.BUILD_ARTIFACTS }}/Tests/vw-bin/${{ matrix.config.vw_bin }} set to executable"

      - name: Run Tests
        run: dotnet vstest ${{ env.BUILD_ARTIFACTS }}/Tests/Tests.dll /ResultsDirectory:${{ env.TEST_ARTIFACTS_BASE_PATH }}/testresults --settings:./test.runsettings --collect:"XPlat Code Coverage" --logger:"trx;LogFilePrefix=testresult"

      - name: Save Test Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-${{ matrix.config.os_name }}-${{ matrix.build.build_type }}
          path: ${{ env.TEST_ARTIFACTS_BASE_PATH }}/testresults

  # build and package the docker image (tar'd) built for ubuntu-latest
  docker-image:
    needs: build-assemblies
    name: docker-image-ubuntu-latest-release
    runs-on: ubuntu-latest
    env:
      DOCKER_ARTIFACTS_PATH: ${{github.workspace}}/src/artifacts/docker
     
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.head_ref || github.ref }}
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Download Binaries
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-release
          path: ${{ env.BUILD_ARTIFACTS }}

      - run: mkdir -p ${{ env.DOCKER_ARTIFACTS_PATH }}

      - name: Build Docker Image
        run: docker build -t learning-loop:latest --build-arg TRAINER_SRC_PATH=artifacts/OnlineTrainer --build-arg RLSIM_SRC_PATH=artifacts/rl-sim -f ./docker/ubuntu.dockerfile .

      - name: Docker Image tar
        run: docker save learning-loop:latest -o ${{ env.DOCKER_ARTIFACTS_PATH }}/learning-loop-ubuntu-latest.tar

      - name: Save Docker Zipped Iamge
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-ubuntu-latest
          path: ${{ env.DOCKER_ARTIFACTS_PATH }}/learning-loop-ubuntu-latest.tar

  # build the example projects for all platforms and configurations
  build-example:
    needs: build-assemblies
    name: build-example-${{ matrix.build.build_type }}-${{ matrix.config.os_name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: "windows-latest", os_name: "windows-latest" }
          - { os: "ubuntu-latest", os_name: "ubuntu-latest" }
          - { os: "macos-13", os_name: "macos-latest" }
        build:
          - { build_type: "debug" }
          - { build_type: "release" }

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.head_ref || github.ref }}

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Download Nuget
        uses: actions/download-artifact@v4
        with:
          name: nuget-artifacts-${{ matrix.build.build_type }}
          path: ${{ env.BUILD_ARTIFACTS }}

      - name: List Downloaded Nuget Packages
        run: ls -l ${{ env.BUILD_ARTIFACTS }}

      - name: Build ConsoleJoiner Example
        run: dotnet build -c ${{ matrix.build.build_type }} src/examples/ConsoleJoiner/ConsoleJoiner.csproj
     
  # analyze the csharp trainer code using codeql
  analyze-trainer-csharp:
    needs: build-rl-binaries
    name: CSharp Trainer Analysis
    runs-on: windows-latest
    permissions:
      # required for all workflows
      security-events: write
      # required to fetch internal or private CodeQL packs
      packages: read
    env:
      VW_BINARY_PATH: ${{github.workspace}}/src/artifacts/vw-bin

    steps:
      # there's no need to check submodules since they are not needed in this job
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.head_ref || github.ref || github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore Binary Parser Binaries
        uses: actions/download-artifact@v4
        with:
          pattern: rl-binaries-*
          merge-multiple: true
          path: ${{ env.BUILD_ARTIFACTS }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
          config-file: ./.github/codeql/codeql-config.yml

      - name: Build Common
        run: dotnet build -c debug src/Common/Common.csproj -p:CIVWBinParserPath=${{ env.VW_BINARY_PATH }} -p:PackagingIntegration=${{ env.DELAY_SIGN_PROPS_PATH }}

      - name: Build OnlineTrainer
        run: dotnet build -c debug src/OnlineTrainerExe/OnlineTrainerExe.csproj -p:CIVWBinParserPath=${{ env.VW_BINARY_PATH }} -p:PackagingIntegration=${{ env.DELAY_SIGN_PROPS_PATH }}

      - name: Build Tests
        run: dotnet build -c debug src/Tests/Tests.csproj -p:CIVWBinParserPath=${{ env.VW_BINARY_PATH }} -p:PackagingIntegration=${{ env.DELAY_SIGN_PROPS_PATH }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: csharp

  # analyze the csharp example code using codeql
  analyze-examples-csharp:
    needs: build-assemblies
    name: CSharp Examples Analysis
    runs-on: windows-latest
    permissions:
      # required for all workflows
      security-events: write
      # required to fetch internal or private CodeQL packs
      packages: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.head_ref || github.ref || github.event.pull_request.head.sha }}

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Download Nuget
        uses: actions/download-artifact@v4
        with:
          name: nuget-artifacts-debug
          path: ${{ env.BUILD_ARTIFACTS }}

      - name: List Downloaded Nuget Packages
        run: ls -l ${{ env.BUILD_ARTIFACTS }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
          config-file: ./.github/codeql/codeql-config.yml

      - name: Build ConsoleJoiner Example
        run: dotnet build -c debug src/examples/ConsoleJoiner/ConsoleJoiner.csproj

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: csharp
